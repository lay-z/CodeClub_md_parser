[
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-final.png",
        "title": "Balloons",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-balloon.png",
                        "text": "Add in a new balloon sprite, and a suitable stage backdrop."
                    },
                    {
                        "text": "Add this code to your balloon, so that it bounces around the screen:",
                        "blocks": "when flag clicked\n\t\tgo to x:(0) y:(0)\n\t\tpoint in direction (45 v)\n\t\tforever\n\t\t\tmove (1) steps\n\t\t\tif on edge, bounce\n\t\tend"
                    },
                    {
                        "text": "Test out your balloon. Does it move too slowly? Change the numbers in your code if you want to speed it up a bit."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-flip.png",
                        "text": "Did you also notice that your balloon flips as it moves around the screen?\n\n\tBalloons don't move like this! To fix this, click on the balloon sprite icon, and then click the blue `i` information icon.\n\n\tIn the 'rotation style' section, click the dot to stop the balloon rotating."
                    },
                    {
                        "text": "Test your program again to see if the problem is fixed."
                    }
                ],
                "number": "1",
                "title": "Animating a balloon",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ With the code you have now, your balloon will always start in the same place and move in the same path. Click the flag a few times to start your program, and you'll see it's the same every time."
                    },
                    {
                        "text": "Instead of using the same x and y position each time, you can let Scratch choose a random number instead. Change your balloon's code, so that it looks like this:",
                        "blocks": "when flag clicked\n\t\tgo to x:(pick random (-150) to (150)) y:(pick random (-150) to (150))\n\t\tpoint in direction (45 v)\n\t\tforever\n\t\t\tmove (1) steps\n\t\t\tif on edge, bounce\n\t\tend"
                    },
                    {
                        "text": "If you click the green flag a few times, you should notice that your balloon starts in a different place each time."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-colour.png",
                        "text": "You could even use a random number to choose a random balloon colour each time:\n\n\tWhat happens if this code is put at the start of your program? Does anything different happen if you put this code _inside_ the `forever` loop? Which do you prefer?",
                        "blocks": "change [colour v] effect by (pick random (0) to (200))"
                    }
                ],
                "number": "2",
                "title": "Random balloons",
                "description": ""
            },
            {
                "number": "",
                "title": "More randomness",
                "challenge": true,
                "description": "Can you make your balloon start by pointing in a random direction (between -90 and 180)?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-costume.png",
                        "text": "+ Click on your balloon sprite, and then click the 'Costumes' tab. You can delete all of the other costumes, just leaving 1 balloon costume. Add a new costume, by clicking 'Paint new costume' and create a new costume called 'burst'."
                    },
                    {
                        "text": "Make sure that your balloon switches to the right costume when the game starts. Your code should now look like this:",
                        "blocks": "when flag clicked\n\t\tswitch costume to [balloon1-a v]\n\t\tpoint in direction (pick random (-90) to (180))\n\t\tgo to x:(pick random (-150) to (150)) y:(pick random (-150) to (150))\n\t\tchange [color v] effect by (pick random (0) to (200))\n\t\tforever\n\t\t\tmove (1) steps\n\t\t\tif on edge, bounce\n\t\tend"
                    },
                    {
                        "text": "To allow the player to burst a balloon, add this code:",
                        "blocks": "when this sprite clicked\n\t\tswitch costume to [burst v]\n\t\tplay sound [pop v]"
                    },
                    {
                        "text": "Test out your project. Can you pop the balloon? Does it work as you expected? You'll need to improve this code, so that when the balloon is clicked, it shows the 'burst' costume for a short time, and is then hidden. You can make all of this happen by changing your balloon `when sprite clicked` code to this:",
                        "blocks": "when this sprite clicked\n\t\tswitch costume to [burst v]\n\t\tplay sound [pop v]\n\t\twait (0.3) secs\n\t\thide"
                    },
                    {
                        "text": "Now that you're deleting the balloon when it's clicked, you'll also need to add a `show` code."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-fullscreen.png",
                        "text": "Try popping a balloon again, to check that it works properly. If you find it difficult to pop the balloon without dragging it around, you can play the game in fullscreen mode by clicking this button:"
                    }
                ],
                "number": "3",
                "title": "Popping balloons",
                "description": "Lets allow the player to pop the balloons!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-score.png",
                        "text": "+ To keep the player's score, you need a place to put it. A _variable_ is a place to store data that can change, like a score.\n\n\tTo create a new variable, click on the 'Scripts' tab, select `Data` and then click 'Make a Variable'.\n\n\tType 'score' as the name of the variable, make sure that it is available for all sprites, and click 'OK' to create it. You'll then see lots of code blocks that can be used with your `score` variable.\n\n\tYou'll also see the score in the top-left of the stage."
                    },
                    {
                        "text": "When a new game is started (by clicking the flag), you want to set the player's score to 0. Add this code to the top of the balloon's `when flag clicked` code:",
                        "blocks": "set [score v] to [0]"
                    },
                    {
                        "text": "Whenever a balloon is popped, you need to add 1 to the score:",
                        "blocks": "when this sprite clicked\n\t\tswitch costume to [burst v]\n\t\tplay sound [pop v]\n\t\twait (0.3) secs\n\t\tchange [score v] by (1)\n\t\thide"
                    },
                    {
                        "text": "Run your program again and click the balloon. Does your score change?"
                    }
                ],
                "number": "4",
                "title": "Adding a score",
                "description": "Let's make things more interesting by keeping score."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-clone.png",
                        "text": "+ A much better way of getting lots of balloons is to _clone_ the balloon sprite.\n\n\tDrag your balloon `when flag clicked` block) off of the event (don't delete it), and instead add code to create 20 balloon clones.\n\n\tYou can now attach the code you've just removed to the `when I start as a clone` block.\n\n\tYour balloon code should now look like this:"
                    },
                    {
                        "text": "Test your project! Now when the flag is clicked, your main balloon sprite will hide and then clone itself 20 times. When each of these 20 clones is started, they will each bounce around the screen randomly, just as they did before. See if you can pop the 20 balloons!"
                    }
                ],
                "number": "5",
                "title": "Lots of balloons",
                "description": "Popping 1 balloon isn't much of a game, so let's add lots more!\n\nOne simple way to get lots of balloons is just to right-click on the balloon sprite and click 'duplicate'. This is OK if you only want a few, but what if you need 20? or 100? Are you really going to click 'duplicate' that many times?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-time.png",
                        "text": "+ You can use another variable to store the remaining time left. Click on the stage, and create a new variable called 'time':"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-timer-1.png",
                        "text": "This is how the timer should work:\n\n\t+ The timer should start at 10 seconds;\n\t+ The timer should count down every second;\n\t+ The game should stop when the timer gets to 0.\n\n\tHere's the code to do this, which you can add to your _stage_:\n\n\tTo add the `repeat until`block:\n\n\tYou can then drag your `time` block:",
                        "blocks": "when flag clicked\n\t\tset [time v] to [10]\n\t\trepeat until <(time) = [0]>\n\t\t\twait (1) secs\n\t\t\tchange [time v] by (-1)\n\t\tend\n\t\tstop [all v]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-readout.png",
                        "text": "Drag your 'time' variable display to the right side of the stage. You can also right-click on the variable display and choose 'large readout' to change how the time is displayed."
                    },
                    {
                        "text": "Test your game. How many points can you score? If your game is too easy, you can:\n\n\t+ Give the player less time;\n\t+ Have more balloons;\n\t+ Make the balloons move faster;\n\t+ Make the balloons smaller.\n\n\tTest your game a few times until you're happy that it's the right level of difficulty."
                    }
                ],
                "number": "6",
                "title": "Adding a timer",
                "description": "You can make your game more interesting, by only giving your player 10 seconds to pop as many balloons as possible."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Balloons/balloons-objects.png",
                        "text": "You'll need to think about the objects you're adding. Think about:"
                    },
                    {
                        "text": "How many will there be?"
                    },
                    {
                        "text": "How big is it? How does it move?"
                    },
                    {
                        "text": "How many points will you score (or lose) for clicking it?"
                    },
                    {
                        "text": "Will it move faster or slower than the balloons?"
                    },
                    {
                        "text": "What will it look/sound like when it's been clicked?\n\nIf you need help adding another object, you can reuse the steps above!"
                    }
                ],
                "number": "",
                "title": "More objects",
                "challenge": true,
                "description": "Can you add in other objects to your game? You can add good objects, like donuts, that give you lots of points, or bad objects, like bats, that take points away."
            }
        ],
        "description": "You are going to make a balloon-popping game!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26745384/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Archived%20Projects/Fruit%20Machine/fruitmachine_screenshot.png",
        "title": "Fruit machine",
        "steps": [
            {
                "components": [
                    {
                        "text": "**Let\u2019s import the different pictures for the game**"
                    },
                    {
                        "text": "Start a new scratch project. Delete the cat by right clicking it and clicking **Delete**"
                    },
                    {
                        "text": "First of all let's add a new Backdrop from the library. Choose the **rays** backdrop from the **Other** category and then delete the original blank stage."
                    },
                    {
                        "text": "Now add a new sprite from the library."
                    },
                    {
                        "text": "Choose an image from any folder. We used **things/Bananas**, but you can use any image you want to."
                    },
                    {
                        "text": "Click on the blue '**i**' next to the sprite's picture in the Sprites window. Rename the sprite to 'Fruit'."
                    },
                    {
                        "text": "Now click the Costumes tab and import two more things so there are three costumes in total (we used **things/apple** and **things/watermelon-a**, but you can use any images you like).\n\nNow we\u2019ve got some costumes, we want the sprite to change between them."
                    }
                ],
                "number": "1",
                "title": "Create a sprite that changes costumes",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Click the `Scripts` tab."
                    },
                    {
                        "text": "Click `Events` and drag a `when flag clicked` into the scripts area. This will be triggered when we click the green flag."
                    },
                    {
                        "text": "Click the **Control** tab and add a `forever` and attach it so it snaps to the bottom."
                    },
                    {
                        "text": "**Click the green flag** in the top right. Notice that a yellow outline is around our script. It\u2019s running because we clicked the green flag, which triggers this."
                    },
                    {
                        "text": "Now click `Looks` and drag in a `next costume` "
                    },
                    {
                        "text": "How do we slow it down so it isn\u2019t changing so quickly? Click the `Control` tab and drag in a `wait 1 secs` "
                    },
                    {
                        "text": "Adjust the time until it\u2019s repeating at a faster pace (a time of 0.5s looks good).",
                        "blocks": "when FLAG clicked\n    forever\n        next costume\n        wait (0.5) secs"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ Adjust the time in the `wait 1 secs` block."
                    },
                    {
                        "text": "What numbers do you think would make the game too easy, or too hard?"
                    }
                ],
                "tests": [
                    {
                        "text": "**Click the green flag.**\n\nDo the costumes change at a sensible rate?"
                    }
                ],
                "number": "2",
                "title": "Making the picture change",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "Great! We can make the sprite change costumes forever, but how do we make it stop when we click on it?\n\nOne way to do it is by using a variable to set the state of the Sprite. This will also be useful later..."
                    },
                    {
                        "text": "Create a new variable by clicking `Data` and `Make a variable`. Call it `stopped` and make it for only this sprite, then uncheck the box next to it so it doesn\u2019t display on the stage."
                    },
                    {
                        "text": "At the start of the game, the sprite won't have been clicked so we'll set the variable to be equal to **\"NO\"**.",
                        "blocks": "when FLAG clicked\n    set [stopped v] to [NO]\n    forever\n        next costume\n        wait (0.5) secs"
                    },
                    {
                        "text": "Now we'll set the variable `stopped` to  **\"YES\"** when someone clicks on the sprite.",
                        "blocks": "when this sprite clicked\n        set [stopped v] to [YES]"
                    },
                    {
                        "text": "Finally we need to make the sprite stop changing costume when the variable `stopped` is still \"NO\".",
                        "blocks": "when FLAG clicked\n        set [stopped v] to [NO]\n        forever\n            if <(stopped) = [NO]> then\n                next costume\n                wait (0.5) secs"
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag, wait for a moment, then click on the sprite."
                    },
                    {
                        "text": "Does it change costume before you click on it?"
                    },
                    {
                        "text": "Does it stop when you do click on it?"
                    },
                    {
                        "text": "**Start the program again**. Does it stop when you put the mouse pointer on it, without clicking?"
                    },
                    {
                        "text": "Does the sprite stop when you click anywhere else on the Stage?"
                    }
                ],
                "number": "3",
                "title": "Making it stop when we click on it",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ **Duplicate the sprite** (Fruit) by right-clicking on it in the bottom right corner."
                    },
                    {
                        "text": "Duplicate it again so there are **3** sprites on the screen."
                    },
                    {
                        "text": "Move each sprite so they are in a line. Make them a bit smaller with if you need to."
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag. All the sprites should change. Try to stop them all on the same picture by clicking on each one in turn!"
                    }
                ],
                "number": "4",
                "title": "Creating the other sprite",
                "description": "Now we need to make the other sprites so we can play our game!"
            },
            {
                "components": [
                    {
                        "text": "First of all, let's create a different Backdrop to display when the game has finished."
                    },
                    {
                        "text": "Click on the stage and then the `Backdrops` tab. Change the name of the existing backdrop to **\"GameOn\"**."
                    },
                    {
                        "text": "Duplicate the backdrop and then add some text to the copy that says **\"Game Over\"**. You can change the size of the text by clicking on it and then dragging one of the corners. Rename this backdrop to be **\"GameOver\"**."
                    },
                    {
                        "text": "Click on the `Scripts` tab for the stage and set the \"GameOn\" backdrop to be the one displayed when the game is started."
                    },
                    {
                        "text": "How can we detect when all the sprites have stopped? Remember we use the `stopped` .",
                        "blocks": "when FLAG clicked\n        switch backdrop to [GameOn v]\n        forever\n            if <([stopped v] of [Fruit3 v]) = [YES]> then\n                switch backdrop to [GameOver v]"
                    }
                ],
                "extensions": [
                    {
                        "text": "**Make the game harder**\n\nChange the difficulty of the game somehow. Just making the costumes change quicker is fairly easy. Can you come up with something more imaginative?\n\nSome ideas you might like to try:"
                    },
                    {
                        "text": "Change the number of costumes each sprite has."
                    },
                    {
                        "text": "Make some sprites have unique costumes."
                    },
                    {
                        "text": "Have different times between costume changes.\n\nHave fun coming up with your own things! Every time you make a change, think about whether it makes the game easier or harder. Is the game too easy or too hard? How can you adjust the difficulty so it\u2019s just right?"
                    }
                ],
                "tests": [
                    {
                        "text": "**Click the green flag.** Does the \"Game Over\" message appear when you all 3 Fruits are stopped, regardless of the order you clicked on them?"
                    }
                ],
                "number": "5",
                "title": "Start each sprite with a random costume",
                "description": "Let's make the sprites change to a random costume when the green flag is clicked.\n\nWhen you start the game just after you\u2019ve loaded it, all the sprites show the same costume and change in unison. It would make the game more interesting (and harder) if they changed in a less predictable way."
            },
            {
                "components": [
                    {
                        "text": "+ We wrote the code to check that the game was over in **step 6**, so all we need to do now is check to see if the player has won. Go back to the backdrops and add some more text to the GameOver backdrop so that also displays the word **\"WIN\"**. Then change its name to **\"Win\"**."
                    },
                    {
                        "text": "Copy the backdrop again to create one with a **\"Lose\"** message. Give it the name **\"Lose\"**."
                    },
                    {
                        "text": "Now we need some code to work out which backdrop to display once the game is over. We can use an `if...then...else` and see if Fruit1 has the same costume as Fruit2, and if Fruit2 has the same costume as Fruit3.",
                        "blocks": "when FLAG clicked\n        switch backdrop to [GameOn v]\n        forever\n            if <<<([stopped v]  of [Fruit1 v]) = [YES]> and <([stopped v]  of [Fruit2 v]) = [YES]>> and <([stopped v]  of [Fruit3 v]) = [YES]>> then\n                if <<([costume # v]  of [Fruit1 v]) = ([costume # v]  of [Fruit2 v])> and <([costume # v]  of [Fruit2 v]) = ([costume # v]  of [Fruit3 v])>> then\n                    switch backdrop to [Win v]\n                else\n                    switch backdrop to [Lose v]"
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag. Does the correct message appear when the game has finished? What will happen if each sprite's costume numbers don't match (for example, if Fruit2's costume number 3 is an apple and Fruit3's costume number 3 is a melon)?"
                    }
                ],
                "number": "7",
                "title": "Tell the player whether they've won or lost.",
                "description": "The aim of the game is to click on the sprites so they stop while showing the same costume. It would be nice to also display a message that told you whether you'd won or lost."
            }
        ],
        "description": "This is a game that has three sprites that change costume. You have to stop them when they\u2019re showing the same picture (like a fruit machine!)."
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-final.png",
        "title": "Clone Wars",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-sprites.png",
                        "text": "Add the 'stars' backdrop and the 'Spaceship' sprite to your project. Shrink the spaceship and move it near the bottom of the screen."
                    },
                    {
                        "text": "Add code to move your spaceship to the left when the left arrow key is pressed. You'll need to use these blocks:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [left arrow v] pressed?> then\n\t\t\t\tchange x by (-4)\n\t\t\tend\n\t\tend"
                    },
                    {
                        "text": "Add code to move your spaceship to the right when the right arrow key is pressed."
                    },
                    {
                        "text": "Test your project to see whether you can control your spaceship with the arrow keys."
                    }
                ],
                "number": "1",
                "title": "Making a Spaceship",
                "description": "Let's make a spaceship that will defend the Earth!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-lightning.png",
                        "text": "+ Add the 'Lightning' sprite from the Scratch library. Click the sprite's costume and turn the lightning upside-down."
                    },
                    {
                        "text": "When the game is started, the lightning should be hidden until the spaceship fires its laser cannons.",
                        "blocks": "when flag clicked\n\t\thide"
                    },
                    {
                        "text": "Add the following code **to the Spaceship** to create a new lightning bolt whenever the space key is pressed.",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [space v] pressed?> then\n\t\t\t\tcreate clone of [Lightning v]\n\t\t\tend\n\t\tend"
                    },
                    {
                        "text": "Whenever a new clone is created, it should start in the same place as the spaceship, and then move up the stage until it touches the edge. Add the following code **to the Lightning sprite**:\n\n\tNote: We move the new clone to the spaceship while it is still hidden, before then showing it. This just looks nicer.",
                        "blocks": "when I start as a clone\n\t\tgo to [Spaceship v]\n\t\tshow\n\t\trepeat until <touching [edge v] ?>\n\t\t\tchange y by (10)\n\t\tend\n\t\tdelete this clone"
                    },
                    {
                        "text": "Test your lightning, by pressing the space key."
                    }
                ],
                "number": "2",
                "title": "Lightning bolts",
                "description": "Let's give the spaceship the ability to fire lightning bolts!"
            },
            {
                "number": "",
                "title": "Fixing the lightning",
                "challenge": true,
                "description": "What happens if you keep the space key held down? Can you use a `wait` {.blockcontrol} block to fix this?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-hippo.png",
                        "text": "+ Create a new sprite from the 'Hippo1' image in the Scratch library."
                    },
                    {
                        "text": "Set its rotation style to be left-right only, and add the following code to hide the sprite when the game starts:",
                        "blocks": "when flag clicked\n\t\thide"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-var.png",
                        "text": "Create a new variable called `speed` , that is for the hippo sprite only.\n\n\tYou'll know if you've done this correctly because the variable will have the name of the sprite next to it, like this:"
                    },
                    {
                        "text": "The following code will create a new hippo every few seconds. **The Stage** is a good place for this code to live:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\twait (pick random (2) to (4)) secs\n\t\t\tcreate clone of [Hippo1 v]\n\t\tend"
                    },
                    {
                        "text": "When each hippo clone starts, make it move around the stage (at a random speed) until it gets hit by the lightning. Add this code **to the hippo** sprite:",
                        "blocks": "when I start as a clone\n\t\tset [speed v] to (pick random (2) to (4))\n\t\tgo to x: (pick random (-220) to (220)) y: (150)\n\t\tshow\n\t\trepeat until <touching [lightning v] ?>\n\t\t\tmove (speed) steps\n\t\t\tturn right (pick random (-10) to (10)) degrees\n\t\t\tif on edge, bounce\n\t\tend\n\t\tdelete this clone"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-hippo-test.png",
                        "text": "Test out your hippo code. You should see a new hippo clone appear every few seconds, each moving at its own speed."
                    },
                    {
                        "text": "Test your laser cannon. If you hit a hippo, does it vanish?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-spaceship-costumes.png",
                        "text": "When a hippo touches your spaceship, we need to make the spaceship explode! To do this, first make sure that your spaceship has 2 costumes called 'normal' and 'hit'.\n\n\tThe spaceship's 'hit' costume can be made by importing the 'Sun' image from the Scratch library, and using the 'Color a shape' tool to change its colour."
                    },
                    {
                        "text": "Add this code to your spaceship so that it switches costume whenever it collides with a flying hippo:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tswitch costume to [normal v]\n\t\t\twait until <touching [Hippo1 v]>?\n\t\t\tswitch costume to [hit v]\n\t\t\tbroadcast [hit v]\n\t\t\twait (1) secs\n\t\tend"
                    },
                    {
                        "text": "Did you notice that you have broadcast a 'hit' message in the code above? You can use this message to make all of the hippos disappear when the spaceship is hit.\n\n\tAdd this code to your hippo:",
                        "blocks": "when I receive [hit v]\n\t\tdelete this clone"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-hippo-collide.png",
                        "text": "Test out this code by starting a new game and colliding with a hippo."
                    }
                ],
                "number": "3",
                "title": "Flying Space-hippos",
                "description": "Let's add lots of flying hippos that are trying to destroy your spaceship."
            },
            {
                "number": "",
                "title": "Lives and Score",
                "challenge": true,
                "description": "Can you add a `lives` {.blockdata}, `score` {.blockdata} or even a `highscore` {.blockdata} to your game? You can use the 'Catch the Dots' project to help you."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-bat.png",
                        "text": "+ Firstly, make a new bat sprite that will `move` . Remember to test out your code."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-bat-costume.png",
                        "text": "If you look at the bat's costumes, you'll see that it already has 2:\n\n\tUse the `next costume` block to make the bat flap its wings as it moves."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-orange.png",
                        "text": "Create a new 'Orange' sprite from the Scratch library"
                    },
                    {
                        "text": "Add code to your bat, so that it creates a new orange clone every few seconds.",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\twait (pick random (5) to (10)) secs\n\t\t\tcreate clone of [Orange v]\n\t\tend"
                    },
                    {
                        "text": "Click on your orange sprite and add this code to make each orange clone drop down the stage from the bat towards the spaceship:",
                        "blocks": "when flag clicked\n\t\thide\n\n\t\twhen I start as a clone\n\t\tgo to [Bat1 v]\n\t\tshow\n\t\trepeat until <touching [edge v]?\n\t\t\tchange y by (-4)\n\t\tend\n\t\tdelete this clone\n\n\t\twhen I receive [hit v]\n\t\tdelete this clone"
                    },
                    {
                        "text": "In your spaceship sprite, you'll need to modify your code so that you are hit if you touch a hippo or an orange:",
                        "blocks": "wait until < <touching [Hippo1 v]?> or <touching [Orange v]?>>"
                    },
                    {
                        "text": "Test your game. What happens if you get hit by a falling orange?"
                    }
                ],
                "number": "4",
                "title": "Fruit Bats!",
                "description": "Let's make a fruit bat that throws oranges at your spaceship."
            },
            {
                "components": [
                    {
                        "text": "+ If you haven't already, create a new variable called `lives` . Your spaceship should start with 3 lives and lose a life whenever it collides with an enemy. Your game should also stop when you run out of lives. If you need help, you can use the 'Catch the Dots' project to help you."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-game-over.png",
                        "text": "Draw a new sprite called 'Game Over', using the text tool."
                    },
                    {
                        "text": "On your stage, broadcast a `game over` message just before the game ends.",
                        "blocks": "broadcast [game over v] and wait"
                    },
                    {
                        "text": "Add this code to your 'Game Over' sprite, so that the message shows at the end of the game:\n\n\tBecause you've used a `broadcast [game over] and wait` block on your stage, it will wait for the 'Game Over' sprite to be displayed before ending the game.",
                        "blocks": "when flag clicked\n\t\thide\n\n\t\twhen I receive [game over v]\n\t\tshow"
                    },
                    {
                        "text": "Test your game. How many points can you score? Can you think of ways to improve your game if it is too easy or too hard?"
                    }
                ],
                "number": "5",
                "title": "Game over",
                "description": "Let's add a 'game over' message at the end of the game."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-aid.png",
                        "text": "+ Add health packs that you can collect to gain extra lives;"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Clone%20Wars/invaders-rocks.png",
                        "text": "Add floating rocks that your spaceship must avoid;"
                    },
                    {
                        "text": "Make more enemies appear when your score gets to 100.",
                        "blocks": "wait until <(score) = [100]>"
                    }
                ],
                "number": "",
                "title": "Improve your game",
                "challenge": true,
                "description": "What improvements can you make to your game? Here are some ideas:"
            }
        ],
        "description": "In this project you'll learn how to create a game in which you have to save the Earth from space monsters.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/46018140/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-final.png",
        "title": "Snowball Fight",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new project, and delete the cat sprite, so that your project is empty."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-resources.png",
                        "text": "For this project, you should have a 'Resources' folder, containing the snowball sprite that you'll need. Make sure that you can find this folder, and ask your club leader if you can't find it."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-sprite.png",
                        "text": "Click 'Upload sprite from file', and select the file 'Snowball.sprite2' in your resources folder.\n\n\tThe sprite contains 2 costumes, a normal costume, and one that shows which direction the snowball is facing."
                    },
                    {
                        "text": "First, let's allow the player to change the angle of the snowball. Add this code to your snowball sprite:",
                        "blocks": "when flag clicked\n\t\twait (0.5) secs\n\t\tgo to x:(-200) y:(-130)\n\t\tpoint in direction (90 v)\n\t\tswitch costume to [snowball-aim v]\n\t\trepeat until <key [space v] pressed?>\n\t\t\tpoint towards [mouse-pointer v]\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-mouse.png",
                        "text": "Test out your project by clicking the green flag. You should see that your snowball follows the mouse, until you press the space bar."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-power.png",
                        "text": "Let's also allow the player to deicde on how powerful the snowball should be thrown. Create a new variable called `power` ."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-slider.png",
                        "text": "Drag your new variable display to the bottom of the stage, near the snowball. Right-click on the variable display and click 'slider'."
                    },
                    {
                        "text": "Add code to set your new `power` variable to 0 when the flag is clicked.",
                        "blocks": "set [power v] to (0)"
                    },
                    {
                        "text": "Now that you have a `power` variable, you can increase the power of the snowball _after_ the direction has been chosen with this code:\n\n\tThis code means that you have to _keep the space bar held down_ after choosing the direction, to choose the snowball's power.",
                        "blocks": "repeat until < not <key [space v] pressed?> >\n\t\t\tchange [power v] by (1)\n\t\t\twait (0.1) secs\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-test.png",
                        "text": "Test your snowball, to see if you can choose its angle and power."
                    }
                ],
                "number": "1",
                "title": "Making a snowball",
                "description": "Let's make a snowball, that you can throw around your stage."
            },
            {
                "components": [
                    {
                        "text": "+ Add this code to the _end_ of your snowball script, to broadcast that you're throwing a snowball:\n\n\tHere's how your snowball code should look:",
                        "blocks": "broadcast [throw v] and wait"
                    },
                    {
                        "text": "Add this script to your snowball, to move until it reaches the edge of the stage:\n\n\tThe script uses the `power` variable to decide how fast to move.",
                        "blocks": "when I receive [throw v]\n\t\tswitch costume to [snowball v]\n\t\trepeat until < touching [edge v]? >\n\t\t\tmove (power) steps\n\t\tend\n\t\thide"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-show.png",
                        "text": "Now that you're hiding the snowball when it touches the edge, add code to `show` costume."
                    },
                    {
                        "text": "Test out your snowball a few times. Does it move at different angles and different speeds?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-throw.png",
                        "text": "If you want to be able to throw your snowball lots of times, just add a `forever` code."
                    }
                ],
                "number": "2",
                "title": "Throwing a snowball",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ First, let's set a maximum power level, so that the snowball can't be thrown too hard.\n\n\tIn your snowball's `when flag clicked` code, we need to increase the power only if it's less than 20. Change your code to:",
                        "blocks": "repeat until< not <key [space v] pressed?> >\n\t\t\tif < (power) < [20] > then\n\t\t\t\tchange [power v] by (1)\n\t\t\t\twait (0.1) secs\n\t\t\tend\n\t\tend"
                    },
                    {
                        "text": "Test out your snowball again, and you'll see that the power never gets above 20."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-minmax.png",
                        "text": "Now that your snowball's maximum power is 20, you can set this as the maximum value for the variable's slider too. Right-click on your power variable, and click 'set slider min and max'."
                    },
                    {
                        "text": "You can also slow down the snowball, by reducing the power slightly as it flies through the air. Add this code block to your snowball's `when I receive [throw]` code:",
                        "blocks": "change [power v] by (-0.25)"
                    },
                    {
                        "text": "Test this new code - does it work as you expected? You may notice that the power keeps reducing, and eventually the snowball moves backwards!\n\n\tTo fix this, you can add an `if` block to your code, so that the power is only lowered if it is above 0:",
                        "blocks": "if < (power) > (0) > then\n\t\t\tchange [power v] by (-0.25)\n\t\tend"
                    },
                    {
                        "text": "You're nearly there, but you also need to add some gravity to your snowball, so that it falls to the ground. You can add gravity by just moving the snowball down continuously with this script:",
                        "blocks": "when I receive [throw v]\n\t\trepeat until <touching [edge v]?>\n\t\t\tchange y by (-5)\n\t\tend"
                    },
                    {
                        "text": "Test out your snowball again, and you should see that your snowball moves much more realistically."
                    }
                ],
                "number": "3",
                "title": "Realistic movement",
                "description": "You now have a snowball, but let's make it move a bit more realistically."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-bear.png",
                        "text": "+ Add in another sprite to your project."
                    },
                    {
                        "text": "Add this code to your new sprite, so that it says \"You got me!\" when it gets hit:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif < touching [snowball v]? > then\n\t\t\t\tsay [You got me!] for (1) secs\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-hit.png",
                        "text": "Test out your new code."
                    },
                    {
                        "text": "Let's do a couple of things to make the game harder. First, let's move the bear each time the player throws the snowball.\n\n\tTo do this, first add a `broadcast` loop. This will let your bear know that a new shot is about to be taken.",
                        "blocks": "broadcast [new shot v]"
                    },
                    {
                        "text": "When your bear receives this message, move it to a new random position with this code:",
                        "blocks": "when I receive [new shot v]\n\t\tset x to (pick random (0) to (200))"
                    },
                    {
                        "text": "Test your project by throwing a few snowballs. Does your bear move position each time?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-rock.png",
                        "text": "You can also make your game harder by adding a rock in front of your snowball."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-ball.png",
                        "text": "You can now change your snowball code, to stop when it touches the edge of the screen _or_ when it touches the rock. Here's how your snowball code should look:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Snowball%20Fight/snow-small.png",
                        "text": "Finally, you can make your game harder by making your snowball and your bear smaller."
                    }
                ],
                "number": "4",
                "title": "The target",
                "description": "Let's add in a target for your snowballs!"
            }
        ],
        "description": "In this project you're going to make a game in which you have to throw snowballs at a target. You'll use the mouse pointer to angle the snowball and the spacebar to choose the snowball's power.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/35172420/?autostart=true\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Flappy%20Parrot/flappy_screenshot.png",
        "title": "Flappy Parrot",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project. Delete the cat by right-clicking it and selecting Delete"
                    },
                    {
                        "text": "Replace the background with an outdoor landscape. **desert** is a good choice."
                    },
                    {
                        "text": "Add the Flappy character. You'll need a sprite with costumes for wings up and wings down. **parrot** is a good choice."
                    },
                    {
                        "text": "Change the name of your sprite to __Flappy__."
                    },
                    {
                        "text": "Give Flappy the following script:",
                        "blocks": "when FLAG clicked\n        go to x: (-50) y: (0)\n        forever\n            change y by (-3)"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__, does Flappy start in the middle of the screen and then fall to the bottom?"
                    }
                ],
                "number": "1",
                "title": "Make Flappy fall",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Click on the __Costumes__ tab and name the costumes **wings up** and **wings down**."
                    },
                    {
                        "text": "Now switch back to the __Scripts__ tab and add this script:",
                        "blocks": "when [space v] key pressed\n        switch costume to [wings down v]\n        repeat (10)\n            change y by (6)\n        end\n        switch costume to [wings up v]\n        repeat (10)\n            change y by (6)\n        end"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__, are you able to control Flappy with the space bar? Do you notice that sometimes you press the space bar but Flappy doesn't move? We'll fix that next..."
                    }
                ],
                "number": "2",
                "title": "Make Flappy fly",
                "description": "Next, we want Flappy to flap upwards when you press the space bar."
            },
            {
                "components": [
                    {
                        "text": "+ Disconnect the blocks under the `when space key pressed` and put them to the side (we'll use them in a few moments.)"
                    },
                    {
                        "text": "Make a new variable `For this sprite only` ."
                    },
                    {
                        "text": "Add the following script by draging in the blocks you put aside:",
                        "blocks": "when FLAG clicked\n        set [flaps v] to [0]\n        switch costume to [wings up v]\n        forever\n            repeat until <(flaps) = [0]>\n                change [flaps v] by (-1)\n                switch costume to [wings down v]\n                repeat (10)\n                    change y by (6)\n                end\n                switch costume to [wings up v]\n                repeat (10)\n                    change y by (6)\n                end"
                    },
                    {
                        "text": "Finally, add to your `when space key pressed` event:",
                        "blocks": "when [space v] key pressed\n        change [flaps v] by (1)"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__, does Flappy now flap once for each time you press the space bar?"
                    }
                ],
                "number": "3",
                "title": "Fix the controls",
                "description": "We'd like Flappy to respond every time we press the space bar. But when we push the space bar Flappy begins two loops of movements. If we push the space bar again before these loops have finished, Scratch ignores the second press. To solve this, we'll use a variable to count up how many flaps we need to do."
            },
            {
                "components": [
                    {
                        "text": "+ Click on the `Paint new sprite` button."
                    },
                    {
                        "text": "Name your costume **pipe**."
                    },
                    {
                        "text": "If the costume is in `Bitmap Mode` button."
                    },
                    {
                        "text": "Click on the `Zoom -` so that you can see the entire drawing area."
                    },
                    {
                        "text": "Click on the `Rectangle` button."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Flappy%20Parrot/pipe_design.png",
                        "text": "Click and drag two boxes, one from the top middle and one from the bottom middle as shown:"
                    },
                    {
                        "text": "You can shade your pipes by clicking on the `Color a shape` button. Choose two shades of the same colour one for the foreground and one for the background. When you click to fill the shapes, the colours will fade between your chosen colours."
                    },
                    {
                        "text": "Name your sprite **Pipe**."
                    }
                ],
                "number": "4",
                "title": "Add the pipes",
                "description": "Next we'll add some obstacles for Flappy to fly through."
            },
            {
                "components": [
                    {
                        "text": "+ Click on your **Pipe** sprite and select the `Scripts` tab."
                    },
                    {
                        "text": "Add the following scripts:",
                        "blocks": "when FLAG clicked\n        hide\n        set size to (200)%\n        forever\n            create clone of [myself v]\n            wait (2) secs\n\n    when I start as a clone\n        go to x: (240) y: (pick random (-80) to (80))\n        show\n        repeat (120)\n            change x by (-4)\n        end\n        delete this clone"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__, do pipes appear with gaps to fly through at different heights? If you find it difficult to navigate Flappy through the pipes without touching them, you can make the gap bigger in the **pipe** sprite by editing the costume."
                    }
                ],
                "number": "5",
                "title": "Make the pipes move",
                "description": "Next we'll make the pipes move and arrange them randomly to provide an obstacle course for Flappy."
            },
            {
                "components": [
                    {
                        "text": "+ Let's add a sound to play when Flappy collides. Click on the **Flappy** sprite then on the `Sounds` tab."
                    },
                    {
                        "text": "Click the `Choose sound from library` button."
                    },
                    {
                        "text": "Pick a collision sound for **Flappy**. The **screech** sound is good."
                    },
                    {
                        "text": "Now click back on the `Scripts` tab."
                    },
                    {
                        "text": "Add the following script:",
                        "blocks": "when FLAG clicked\n        wait until ((touching [edge v]?) or (touching [Pipe v]?))\n        play sound [screech v]\n        say [Game Over!]\n        broadcast [GameOver v]\n        stop [other scripts in sprite v]"
                    },
                    {
                        "text": "Click on the **Pipe** sprite and add a script:",
                        "blocks": "when I receive [GameOver v]\n        stop [other scripts in sprite v]"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__, does the game end when Flappy touches a pipe or the edge of the screen?"
                    }
                ],
                "number": "6",
                "title": "Detect collision with the pipes",
                "description": "To make the game a challenge, the player needs to guide Flappy through the gaps without touching the pipes or the edges of the screen. Now we'll add some blocks to detect if Flappy hits something."
            },
            {
                "components": [
                    {
                        "text": "+ Let's add a sound to play when Flappy scores a point. Click on the **Pipe** sprite add a score sound. **bird** is a good choice."
                    },
                    {
                        "text": "Now click back on the `Scripts` tab."
                    },
                    {
                        "text": "Make a new variable `For all sprites` ."
                    },
                    {
                        "text": "Add a block to set the score to 0 when the flag is clicked."
                    },
                    {
                        "text": "Add the following block:",
                        "blocks": "when I start as a clone\n        wait until <(x position) < ([x position v] of [Flappy v])>\n        change [score v] by (1)\n        play sound [bird v]"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ __How many ways can you make this game easier or harder?__"
                    },
                    {
                        "text": "__Well done you\u2019ve finished the basic game. There are more things you can do to your game though. Have a go at these challenges!__"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__, does the player score points for flying Flappy through the pipes?"
                    }
                ],
                "number": "7",
                "title": "Add scoring",
                "description": "The player should score a point every time Flappy makes it though a pipe. Let's add that next."
            },
            {
                "components": [
                    {
                        "text": "+ when the game is over check if you need to set a new high score:",
                        "blocks": "when I receive [GameOver v]\n        if <(score) > (hi-score)> then\n            set [hi-score v] to (score)\n        end\n        stop [other scripts in sprite v]"
                    }
                ],
                "number": "1",
                "title": "add a high score",
                "challenge": true,
                "description": "+ Make a new variable and tick the `Cloud variable (stored on server)` {.blockgrey} box. Call the variable `hi-score` {.blockorange}"
            },
            {
                "components": [
                    {
                        "text": "+ Add a new variable `For this sprite only` ."
                    },
                    {
                        "text": "Change Flappy's falling script:\n```blocks\n    when FLAG clicked\n        set [rise v] to [0]\n        go to x"
                    }
                ],
                "number": "2",
                "title": "add gravity",
                "challenge": true,
                "description": "When something falls under gravity it doesn't usually fall at a fixed rate. For this challenge we will make Flappy fall as if under gravity."
            },
            {
                "components": [
                    {
                        "text": "+ Replace the `broadcast GameOver` "
                    },
                    {
                        "text": "Now add the following scripts:",
                        "blocks": "when I receive [Fall v]\n        repeat (10)\n            turn ccw (5) degrees\n\n    when I receive [Fall v]\n        repeat until <(y position) < [-180]>\n            change y by (rise)\n            change [rise v] by (-0.4)\n        end\n        hide\n        broadcast [GameOver v]"
                    },
                    {
                        "text": "Don't forget to add a `show` block and reset Flappy's direction when the game restarts."
                    }
                ],
                "number": "3",
                "title": "fall off screen",
                "challenge": true,
                "description": "When the player loses make Flappy fall off the bottom of the screen before ending the game."
            }
        ],
        "description": "__In this project we\u2019ll make our own version of the highly popular mobile game Flappy Bird. This project requires Scratch 2.0.__\n\nPress the space bar to flap and try to navigate through the gaps in the pipes!"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Archived%20Projects/What%27s%20That/whatsthat_screenshot.png",
        "title": "What's That",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project and delete the cat sprite."
                    },
                    {
                        "text": "Click Stage and then the Backdrops tab. `Choose Backdrop From Library` to change the backdrop to __indoors/chalkboard__."
                    },
                    {
                        "text": "Create a new sprite from the library, and give it any costume you like. You can pick something from the things folder."
                    },
                    {
                        "text": "Position the new sprite in the middle of the blackboard. Make it bigger or smaller if you need to."
                    },
                    {
                        "text": "Click the Costumes tab and import four more things. They can be anything you want, yay!"
                    },
                    {
                        "text": "Let\u2019s now make a random picture appear. Create this script:",
                        "blocks": "when FLAG clicked\n    repeat (pick random (1) to (5)\n        next costume\n    end"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag.__\n\nDoes the sprite show a different costume?\n\n__Click on it a few more times.__\n\n Do you get different costumes every time? Sometimes you\u2019ll get the same costume twice in a row, but that\u2019s OK. You\u2019ll also notice that you can see the sprite flicker as it changes costume. We\u2019ll fix that in the next step."
                    }
                ],
                "number": "1",
                "title": "Make different things appear on the blackboard",
                "description": "__We want a few different pictures to show up on the blackboard.__"
            },
            {
                "components": [
                    {
                        "text": "+ On the Data palette, create a variable called Score."
                    },
                    {
                        "text": "Change the script to look like this:\nYou should add the `hide` block, and everything below it.",
                        "blocks": "when FLAG clicked\n    hide\n    repeat (pick random (1) to (5)\n        next costume\n    end\n    set [score v] to (110)\n    repeat until ((score) = (0)\n        change [score v] by [-10]\n        set [pixelate v] effect to (score)\n        set [colour v] effect to (score)\n        show\n        wait (1) secs\n    end"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ __Try changing the starting score and how much it changes each time around the loop.__ How does this change how the picture looks? Does it make it harder or easier to spot what the picture is?"
                    },
                    {
                        "text": "__Try some different graphic effects from the pull-down lists.__ How do they change the difficulty?"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag.__"
                    },
                    {
                        "text": "Does a random and distorted picture appear?"
                    },
                    {
                        "text": "Does the distortion get less in stages?"
                    },
                    {
                        "text": "Does the score go down as the picture becomes less distorted?"
                    },
                    {
                        "text": "Do you get an undistorted image when the score reaches zero?"
                    },
                    {
                        "text": "Do you still get a different picture every time you click the green button?"
                    }
                ],
                "number": "2",
                "title": "Make the pictures distorted",
                "description": "__Let\u2019s now make a picture distorted when it appears, and become clearer over a few seconds.__\n\nWe\u2019ll use a score variable to control how much distortion there is. If the score is high, there will be lots of distortion. As the score goes down, there will be less and less distortion. The score also acts as a timer, like on the __Timer Scratch Card.__"
            },
            {
                "tests": [
                    {
                        "text": "__Click the green flag.__"
                    },
                    {
                        "text": "When you test the game, you can use the __answer monitor__ on the stage to tell what the right answer is. That\u2019s good for testing."
                    },
                    {
                        "text": "What happens when you click on the __right answer__?"
                    },
                    {
                        "text": "What happens when you click on the __wrong answer?__"
                    },
                    {
                        "text": "What happens to the wrong answer when you __start a new game?__\n\nThe test shows up two problems. First, wrong guesses don\u2019t reappear when the next game starts. Second, the score doesn\u2019t stop going down when we get the right answer."
                    },
                    {
                        "text": "To fix the first problem, add this script to each of the five answer sprites:\nTo fix the second problem, we need to stop the __question sprite__\u2019s repeat until loop when the player clicks on the right answer. We\u2019ll use a new variable to do that. We\u2019ll set it to __zero__ when the game starts and set it to __one__ when the game is won. We\u2019ll make the repeat until loop stop when either the score reaches __zero__ OR the __game-winning flag__ is set to __one.__",
                        "blocks": "when FLAG clicked\n        show"
                    },
                    {
                        "text": "Create a new variable called won?"
                    },
                    {
                        "text": "Change the scripts so they look like this:",
                        "blocks": "when FLAG clicked\n        hide\n        repeat (pick random (1) to (5)\n            next costume\n        end\n        set [right answer v] to (costume)\n        set [score v] to (110)\n        set [won v] to (0)\n        repeat until <<(score) = (0)> or <(won) = (1)>>\n            change [score v] by (-10)\n            set [pixelate effect v] to (score)\n            set [colour effect v] to (score)\n            show\n            wait (1) secs\n        end\n\n    when I receive [won v]\n        set [won v] to (1)\n        clear graphic effects\n        say (join [Congratulations! You scored] (score))"
                    }
                ],
                "number": "3",
                "title": "Allow the player to guess the picture",
                "description": "So far we\u2019ve got our random picture appearing slowly, and a score which decreases over time, but how do you win the game? We\u2019ll add some sprites at the bottom of the screen for the player to click on. If they click on the right one, they win the game. If they click on the wrong one, that sprite disappears and the game carries on.\n\nFirst, we need to know what the right answer is."
            },
            {
                "components": [
                    {
                        "text": "* Try changing how fast the picture is revealed and how fast the score goes down.\n* Try changing the distortions on the picture.\n* Try changing the pictures being guessed, to make them either more similar or more different. If you do this, don\u2019t forget to change the answer sprite\u2019s costume."
                    }
                ],
                "number": "1",
                "title": "Make the game harder or easier",
                "challenge": true,
                "description": "Change how difficult the game is."
            },
            {
                "components": [
                    {
                        "text": "Find some different distortions that work well.\n\nChange the game so that each game uses a different distortion in the repeat until loop.\n\n__Hint:__ Try creating a new variable, called distortion to use. Set it to a random value at the start of the game. Use if blocks in the body of the repeat until loop to apply the correct distortion for this game."
                    }
                ],
                "number": "2",
                "title": "Distort the picture differently in each game",
                "challenge": true,
                "description": "At the moment, each play of the game uses the same distortion. In Step 2, you might have tried some different distortions that work at least as well as the colour + pixelation we used."
            },
            {
                "components": [
                    {
                        "text": "__Hint:__ You\u2019ll need an extra variable to store the grand total across all the rounds. You\u2019ll also need a loop to go through the different rounds.\n\n__Hint:__ You\u2019ll also have to make the wrong guesses reappear at the start of each round. Perhaps you could use a broadcast message to do that?"
                    }
                ],
                "number": "3",
                "title": "Make a game have a few rounds",
                "challenge": true,
                "description": "At the moment, each game is independent. Change it so that the game proceeds in several rounds. For instance, have one game take three rounds, so the player has to guess three pictures and can score up to 300 points."
            },
            {
                "components": [
                    {
                        "text": "Does each round need to score the same? Should you get more points for guessing quickly in the later, more difficult rounds?\n\n__Hint:__ How will you know which round you\u2019re in? How can you use that to change the difficulty and the score?"
                    }
                ],
                "number": "4",
                "title": "Make later rounds more difficult",
                "challenge": true,
                "description": "As you go through different rounds, make the game harder each time."
            },
            {
                "number": "5",
                "title": "Keep playing until the player gets it wrong",
                "challenge": true,
                "description": "Instead of using a fixed number of rounds, keep playing the game until the player doesn\u2019t get a picture right. This probably only works if the game gets harder in later rounds."
            },
            {
                "components": [
                    {
                        "text": "This idea only really works if you don\u2019t add up someone\u2019s score over several rounds."
                    }
                ],
                "number": "6",
                "title": "Make the game harder or easier depending on how well the player does",
                "challenge": true,
                "description": "Rather than always making the game harder, make the game adjust the difficulty depending on the skill of the player. If they get the right picture quickly, make the next game a bit harder. If they don\u2019t get the right picture, or only get it late, make the next game a bit easier."
            },
            {
                "number": "7",
                "title": "Keep track of the highest score",
                "challenge": true,
                "description": "Keep track of the highest score. If someone manages to beat it, ask for their name and update the highest score. Make sure the highest score, and the name of the person who scored it, are displayed."
            },
            {
                "components": [
                    {
                        "text": "Does this make the game better?"
                    }
                ],
                "number": "8",
                "title": "Make wrong guesses expensive",
                "challenge": true,
                "description": "At the moment, there\u2019s no penalty to just clicking on all the answer sprites as quickly as you can. Change the game so that the score goes down a bit every time you make an incorrect guess."
            }
        ],
        "description": "A random object is shown on the blackboard, all distorted. You have to guess what it is by clicking on the right picture below. The quicker you guess, the higher your score!"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-final.png",
        "title": "Paint Box",
        "link": "http://jumpto.cc/paintbox-resources",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pencil.png",
                        "text": "Add the pencil sprite to your project."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pencil-delete.png",
                        "text": "Click 'Costumes', and delete the 'pencil-b' costume."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pencil-blue.png",
                        "text": "Rename your costume 'pencil-blue', and use the 'Color a shape' tool to make the pencil blue."
                    },
                    {
                        "text": "As you'll be using the mouse to draw, you'll want the pencil to follow the mouse `forever` . Add this code to your pencil sprite:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t  go to [mouse pointer v]\n\t\tend"
                    },
                    {
                        "text": "Test out this code by clicking the flag and then moving the mouse around the stage. Does this work as you expected?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-center.png",
                        "text": "Have you noticed that it's the centre of the pencil, and not the tip, that follows the mouse pointer?\n\n\tTo fix this, click on the 'pencil-blue' costume of your pencil sprite, and click 'Set costume center'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pencil-center.png",
                        "text": "You should notice that a crosshair appears on the costume. You can now click just below the tip of the pencil, to set this point as the costume centre."
                    },
                    {
                        "text": "Click the 'Scripts' tab, and then test out your pencil again - does it work better than it did before?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pencil-draw-code.png",
                        "text": "Next, let's make your pencil draw `if` the mouse has been clicked. Add this code to your pencil sprite:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-draw.png",
                        "text": "Test your code again. This time, move the pencil around the stage and hold down the mouse button. Can you draw with your pencil?"
                    }
                ],
                "number": "1",
                "title": "Making a pencil",
                "description": "Let's start by making a pencil, that can be used to draw on the stage."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-blue-duplicate.png",
                        "text": "+ Click on your pencil sprite, click 'Costumes' and duplicate your 'pencil-blue' costume."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pencil-green.png",
                        "text": "Rename your new costume 'pencil-green', and colour the pencil green."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-selectors.png",
                        "text": "Create two new sprites, which you will use to select the blue or green pencil."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-broadcast.png",
                        "text": "When the green selector icon is clicked, you need to `broadcast` a message to the pencil sprite, telling it to change its costume and pencil colour.\n\n\tTo do this, first add this code to the green selector icon:\n\n\tTo create the `broadcast` block, click the down arrow and select 'new message...'.\n\n\tYou can then type 'green' to create your new message.",
                        "blocks": "when this sprite clicked\n\t\tbroadcast [green v]"
                    },
                    {
                        "text": "You now need to tell your pencil sprite what to do when it receives the message. Add this code to your pencil sprite:\n\n\tTo set the pencil to colour to green, click the coloured box in the `set color` block, and click on the green selector icon to choose green as your pencil colour.",
                        "blocks": "when I receive [green v]\n\t\tswitch costume to [pencil-green v]\n\t\tset pen color to [#00ff00]"
                    },
                    {
                        "text": "You can now do the same for the blue pencil icon, adding this code to the blue selector sprite:\n\n\t...and adding this code to the pencil sprite:",
                        "blocks": "when this sprite clicked\n\t\tbroadcast [blue v]"
                    },
                    {
                        "text": "Finally, you need to tell your pencil sprite what costume and pencil colour to choose, as well as clearing the screen, when your project is started. Add this code to the beginning of the pencil's `when flag clicked` loop):\n\n\tIf you prefer, you can start with a different colour pencil!",
                        "blocks": "clear\n\t\tswitch costume to [blue-pencil v]\n\t\tset pen color to [#0000ff]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-pens-test.png",
                        "text": "Test out your project. Can you switch between blue and green pens?"
                    }
                ],
                "number": "2",
                "title": "Coloured pens",
                "description": "Let's add different colour pens to your project, and allow the user to choose between them!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-x.png",
                        "text": "+ Let's add a button to clear the stage. To do this, add the 'X-block' letter sprite to the stage, and colour it in red."
                    },
                    {
                        "text": "Add code to your new cancel button to clear the stage when it's clicked.\n\n\tNotice that you don't need to send a message to clear the stage, as any sprite can do it!",
                        "blocks": "when this sprite clicked\n\t\tclear"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-eraser-costume.png",
                        "text": "You can also create an eraser. If your club leader has given you a 'Resources' folder, click 'Upload costume from file' and add the 'eraser.svg' image.\n\n\tIf you don't have the eraser.svg image, just create a new white pen instead!"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-eraser-stage.png",
                        "text": "You should also add the eraser image as a new selector sprite. This is how your stage shoud look:"
                    },
                    {
                        "text": "You can then add code to the eraser selector sprite, to tell the pencil to switch to an eraser.",
                        "blocks": "when this sprite clicked\n\t\tbroadcast [eraser v]"
                    },
                    {
                        "text": "When the pencil receives this message, you can create an eraser by switching the pencil costume to the eraser, and switching the pencil colour to the same colour as the stage!",
                        "blocks": "when I receive [eraser v]\n\t\tswitch costume to [eraser v]\n\t\tset pen color to [#FFFFFF]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-erase-test.png",
                        "text": "Test your project, to see if you can clear and erase on the stage."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-draw-problem.png",
                        "text": "There's one more problem with the pencil - you can draw anywhere on the stage, including near the selector icons!\n\n\tTo fix this, you have to tell the pencil only to draw if the mouse is clicked _and_ if the y-position of the mouse is greater than -110 (`mouse y`statement to look like this:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-fixed.png",
                        "text": "Test your project; you now shouldn't be able to draw near the selector blocks."
                    }
                ],
                "number": "3",
                "title": "Making mistakes",
                "description": "Sometimes mistakes happen, so let's add a 'clear' button and an eraser to our project!"
            },
            {
                "components": [
                    {
                        "text": "+ First, add a new variable called 'width'. If you're not sure how to do this, the 'Balloons' project will help you."
                    },
                    {
                        "text": "Add this line _inside_ the `forever` loop of your pencil's code:\n\n\tYour pencil width will now repeatedly be set to the value of your 'width' variable.",
                        "blocks": "set pen size to (width)"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-slider.png",
                        "text": "You can change the number stored in this variable by right-clicking on your variable (on the stage) and clicking 'slider'.\n\n\tYou can now drag the slider below the variable to change its value."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-width-test.png",
                        "text": "Test your project, and see if you can modify the pencil width.\n\n\tIf you prefer, you can set the minimum and maximum value of 'width' that's allowed. To do this, right-click on your variable again and click 'set slider min and max'. Set the minimum and maximum values of your variable to something more sensible, like 1 and 20.\n\n\tKeep testing your 'width' variable until you're happy."
                    }
                ],
                "number": "4",
                "title": "Changing the pencil width",
                "description": "Let's allow the user to draw using a range of different pencil sizes."
            },
            {
                "components": [
                    {
                        "text": "+ b = Switch to blue pen"
                    },
                    {
                        "text": "g = switch to green pen"
                    },
                    {
                        "text": "e = switch to eraser"
                    },
                    {
                        "text": "c = clear screen\n\nYou could even allow the user to change the pen width with the arrow keys!"
                    }
                ],
                "number": "",
                "title": "Shortcuts",
                "challenge": true,
                "description": "Can you create keyboard shortcuts for your commands? For example:"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Paint%20Box/paint-final.png",
                        "text": "Can you use your pens to draw a picture?"
                    }
                ],
                "number": "",
                "title": "More pens",
                "challenge": true,
                "description": "Can you add red, yellow and black pens to your paint program? You'll find all of the images you need in your 'Resources' folder. Remember to add keyboard shortcuts for these new pens!"
            }
        ],
        "description": "In this project, you will be making your own paint program!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/63473366/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-final.png",
        "title": "Create Your Own World",
        "link": "http://jumpto.cc/world-resources",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-resources.png",
                        "text": "For this project, you should have a 'Project Resources' folder, containing all of the images you'll need. Make sure that you can find this folder, and ask your club leader if you can't find it."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-player.png",
                        "text": "Add the image 'room1.png' as a new stage backdrop, and the image 'player.png' as a new sprite. If you don't have these images you can draw them yourself! Here's how your project should look:"
                    },
                    {
                        "text": "Let's use the arrow keys to move the player around. When the player presses the up arrow, you want the player to move up, by changing its y coordinate. Add this code to the player sprite:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [up arrow v] pressed? > then\n\t\t\t\tchange y by (2)\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-up.png",
                        "text": "Test out your player by clicking the flag and then holding down the up arrow. Does your player move up?"
                    },
                    {
                        "text": "To move the player to the left, you need to add another `if` block to your player, which changes the x coordinate:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [up arrow v] pressed? > then\n\t\t\t\tchange y by (2)\n\t\t\tend\n\t\t\tif <key [left arrow v] pressed? > then\n\t\t\t\tchange x by (-2)\n\t\t\tend\n\t\tend"
                    }
                ],
                "number": "1",
                "title": "Coding your player",
                "description": "Let's start by creating a player that can move around your world."
            },
            {
                "number": "",
                "title": "Moving in all four directions",
                "challenge": true,
                "description": "Can you add more code to your player, so that they can move up, down, left and right. Use the code you already have to help you!"
            },
            {
                "number": "",
                "title": "Fixing your player's movement",
                "challenge": true,
                "description": "Add code to your player so that you can't walk through walls in any direction. Use the code you already have to help you!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-backdrops.png",
                        "text": "+ Add 2 more backdrops to your stage ('room2.png' and 'room3.png'), so that you have 3 backdrops in total. Make sure that they are in the right order - this will help you later."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-room.png",
                        "text": "You'll need a new variable called `room` , to keep track of what room the player is in."
                    },
                    {
                        "text": "When the player touches the orange door in the first room, the next backdrop should be displayed, and the player should move back to the left side of the stage. Here's the code you'll need - it should go inside the player's `forever` loop:",
                        "blocks": "if < touching color [#F2A24A] > then\n\t\t\tswitch backdrop to [next backdrop v]\n\t\t\tgo to x: (-200) y: (0)\n\t\t\tchange [room v] by (1)\n\t\tend"
                    },
                    {
                        "text": "Add this code to the _start_ of your player code (before the `forever` loop) to make sure that everything is reset when the flag is clicked:",
                        "blocks": "set [room v] to (1)\n\t\tgo to x: (-200) y: (0)\n\t\tswitch backdrop to [room1 v]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-room-test.png",
                        "text": "Click the flag and move your player over the orange door. Does your player move to the next screen? Does the `room` variable change to 2?"
                    }
                ],
                "number": "2",
                "title": "Coding your world",
                "description": "Let's allow the player to walk through doors into other rooms!"
            },
            {
                "number": "",
                "title": "Moving to the previous room",
                "challenge": true,
                "description": "Can you make your player move to the previous room when they touch a yellow door? Remember that this code will be _very_ similar to the code you've already added for moving to the next room."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-sign.png",
                        "text": "+ Upload the image 'sign.svg' as a new sprite, and rename the sprite 'welcome sign'."
                    },
                    {
                        "text": "This sign will only be visible in room 1, so let's add some code to the sign to make sure that this happens:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif < (room) = [1] > then\n\t\t\t\tshow\n\t\t\telse\n\t\t\t\thide\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-sign-test.png",
                        "text": "Test your sign by moving between rooms. Your sign should only be visible in room 1."
                    },
                    {
                        "text": "A sign isn't much good if it doesn't say anything! Let's add some more code (in another separate block) to display a message if the sign is touching the player:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif < touching [player v]? > then\n\t\t\t\tsay [Welcome! Can you get to the treasure?]\n\t\t\telse\n\t\t\t\tsay []\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-sign-test2.png",
                        "text": "Test out your sign, and you should see a message when the player touches it."
                    }
                ],
                "number": "3",
                "title": "Signs",
                "description": "Let's add signs to your world, to guide your player on their journey."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-treasure.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "Treasure!",
                "challenge": true,
                "description": "Can you add a new treasure chest sprite, using the image 'chest.svg'. This treasure chest should be placed in room 3, and should say 'Well done!' when the player touches it."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-person.png",
                        "text": "+ Add in a new person sprite, using the image 'person.png'."
                    },
                    {
                        "text": "Add in this code, so that the person talks to your player. This code is very similar to the code you added to your sign:",
                        "blocks": "when flag clicked\n\t\tgo to x: (-200) y: (0)\n\t\tforever\n\t\t\tif < touching [player v]? > then\n\t\t\t\tsay [Did you know that you can go through orange and yellow doors?]\n\t\t\telse\n\t\t\t\tsay []\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-person-test.png",
                        "text": "You could also allow your person to move, by using these two blocks:\n\n\tYour person will act differently, depending on whether you place this code inside the `forever` block. Try both and see which you prefer.",
                        "blocks": "move (1) steps\n\t\tif on edge, bounce"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-person-rotate.png",
                        "text": "Have you noticed that your person flips upside-down. To stop this, click the sprite's information icon (`i`), and click the dot to fix to rotation style."
                    }
                ],
                "number": "4",
                "title": "People",
                "description": "Let's add other people to your world that your player can interact with."
            },
            {
                "number": "",
                "title": "Improving your person",
                "challenge": true,
                "description": "Can you add code to your new person, so that they only appear in room 1? Make sure you test out your new code!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-enemy2.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "More enemies",
                "challenge": true,
                "description": "Can you create another enemy in room 3, that patrols up and down through the gap in the wall?"
            },
            {
                "components": [
                    {
                        "text": "+ Add a new variable valled `coins` to your project."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-coins.png",
                        "text": "Add a new 'coin' sprite to your project."
                    },
                    {
                        "text": "Add code to your coin, so that it only appears in room 1."
                    },
                    {
                        "text": "Add code to your coin sprite, to add 1 to your `coins` once they've been picked up:\n\n\tThe code `stop other scripts in sprite` is needed so that the coin stops being displayed in room 1 once it's been collected.",
                        "blocks": "when flag clicked\n\t\twait until <touching [player v]?>\n\t\tchange [coins v] by (1)\n\t\tstop [other scripts in sprite v]\n\t\thide"
                    },
                    {
                        "text": "You'll also need to add code to set your `coins` variable to 0 at the start of your game."
                    },
                    {
                        "text": "Test your project - collecting your coins should change your score to 1."
                    }
                ],
                "number": "5",
                "title": "Collecting coins",
                "description": ""
            },
            {
                "number": "",
                "title": "More coins",
                "challenge": true,
                "description": "Can you add more coins to your game? They can be in different rooms, and some coins could even be guarded by patroling enemies."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-key.png",
                        "text": "+ Create a new sprite from your 'key-blue.svg' image. Switch your stage to backdrop 3, and place the key somewhere difficult to reach!"
                    },
                    {
                        "text": "Make sure that your key is only visible in room 3."
                    },
                    {
                        "text": "Create a new list variable called `inventory` . This will be where you store all of the items your player collects."
                    },
                    {
                        "text": "The code for collecting the key is very similar to the code for collecting coins. The difference is that you add the key to your inventory.",
                        "blocks": "when flag clicked\n\t\twait until <touching [player v]?>\n\t\tadd [blue key] to [inventory v]\n\t\tstop [other scripts in sprite v]\n\t\thide"
                    },
                    {
                        "text": "Test out your key, to see if you can collect it, and add it to your inventory. Remember to add code to your stage to empty your inventory at the start.",
                        "blocks": "delete (all v) of [inventory v]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-door.png",
                        "text": "Create a new sprite from your 'door-blue.png' image, and place your blue door across the gap in the two walls."
                    },
                    {
                        "text": "Add code to your door, so that it is only visible in room 3."
                    },
                    {
                        "text": "You'll need to hide your blue door to allow your player to pass once you have the blue key in your inventory.",
                        "blocks": "when flag clicked\n\t\twait until <[inventory v] contains [blue key]>\n\t\tstop [other scripts in sprite v]\n\t\thide"
                    },
                    {
                        "text": "Test out your project, and see if you can collect the blue key to open the door!"
                    }
                ],
                "number": "6",
                "title": "Doors and keys",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Change the setting of your game, and your game graphics;"
                    },
                    {
                        "text": "Add sound and music to your game;"
                    },
                    {
                        "text": "Add more people, enemies, signs and coins;"
                    },
                    {
                        "text": "Add red and yellow doors, that need their own keys to open them;"
                    },
                    {
                        "text": "Add more rooms to your world;"
                    },
                    {
                        "text": "Add other useful items to your game;"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-bribe.png",
                        "text": "Use coins to get information from other people;"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Create%20Your%20Own%20World/world-north-south.png",
                        "text": "You could even add north and south doors, so that the player can move between rooms in all 4 directions. For example, if you had 9 rooms, you could think of them as being in a 3x3 grid. You can then add 3 to the room number to move down 1 level."
                    }
                ],
                "number": "",
                "title": "Create your own world",
                "challenge": true,
                "description": "You can now continue creating your own world. Here are some ideas:"
            }
        ],
        "description": "In this project you'll learn how to create your own open world adventure game.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/34248822/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-final.png",
        "title": "Rock Band",
        "steps": [
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-scratch.png",
                        "text": "+ First, open up the Scratch editor. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>. It looks like this:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-delete.png",
                        "text": "The cat sprite that you can see is the Scratch mascot. Let's get rid of it, by right-clicking and then clicking 'delete'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-sprite-library.png",
                        "text": "Next, click 'Choose sprite from library' to open up a list of all the Scratch sprites."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-sprite-drum.png",
                        "text": "Scroll down until you see a drum sprite. Click on a drum, and click 'OK' to add it to your project."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-shrink.png",
                        "text": "Click the 'shrink' icon, and then click on the drum a few times to make it smaller."
                    }
                ],
                "number": "1",
                "title": "Sprites",
                "description": "Before you can start animating, you'll need to add in a 'thing' to animate. In Scratch, these 'things' are called __sprites__."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-stage-choose.png",
                        "text": "+ At the moment, the stage is white, and looks pretty boring! Let's add a backdrop to the stage, by clicking 'Choose backdrop from library'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-backdrop.png",
                        "text": "Click 'Indoors' on the left, and then click on a stage backdrop and click 'OK'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-stage.png",
                        "text": "Your stage should now look like this:"
                    }
                ],
                "number": "2",
                "title": "The Stage",
                "description": "The __stage__ is the area on the left, and is where your project comes to life. Think of it as a performance area, just like a real stage!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-code.png",
                        "text": "+ You can find the code blocks in the 'Scripts' tab, and they are all colour-coded! \n\n\tClick on the drum sprite, and then drag these 2 blocks into the code area to the right, making sure that they are connected together (like Lego blocks):"
                    },
                    {
                        "text": "Click the drum to try out your new instrument!"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-drum-costume.png",
                        "text": "You can also change how the drum looks when it's clicked, by creating a new costume. Click the 'Costumes' tab, and you'll see the drum image."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-drum-duplicate.png",
                        "text": "Right-click on the costume and click 'duplicate' to create a copy of the costume."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-drum-hit.png",
                        "text": "Click on the new costume (called 'drum2') and then select the line tool and draw lines to make it look like the drum is making a sound."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-drum-name.png",
                        "text": "The names of the costumes aren't very helpful at the moment. Rename the 2 costumes to 'not hit' and 'hit' by typing the new name of each costume into the text box."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-looks.png",
                        "text": "Now that you have 2 different costumes for your drum, you can choose which costume is displayed! Add these 2 blocks to your drum:\n\n\tThe code block for changing the costume is in the `Looks` section."
                    },
                    {
                        "text": "Test your drum. When clicked, your drum should now look like it's been hit!"
                    }
                ],
                "number": "3",
                "title": "Making a Drum",
                "description": "Let's code your drum to make a sound when it's hit."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-singer-mic.png",
                        "text": "+ Add another 2 sprites to your stage; a singer and a microphone."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-import-sound.png",
                        "text": "Before you can make your singer sing, you need to add a sound to your sprite. Make sure that you have selected your singer, then click the 'Sounds' tab, and click 'Choose sound from library':"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Rock%20Band/band-choose-sound.png",
                        "text": "If you click 'Vocals' on the left hand side, you will then be able to choose a suitable sound to add to your sprite."
                    },
                    {
                        "text": "Now that the sound has been added, you can add this code to your singer:",
                        "blocks": "when this sprite clicked\n\t\tplay sound [singer1 v] until done"
                    },
                    {
                        "text": "Click on your singer, to make sure that she sings when clicked."
                    }
                ],
                "number": "4",
                "title": "Making a Singer",
                "description": "Let's add a singer to your band!"
            }
        ],
        "description": "In this project you'll learn how to code your own musical instruments!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26741186/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-final.png",
        "title": "Space Junk",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-shrink.png",
                        "text": "Click the 'Shrink' button and then click on the cat a few times to make it a little smaller."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-bg.png",
                        "text": "To add a background, click 'Choose backdrop from library' and select the 'Stars' backdrop.\n\n\tThis is how your stage should look:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-coords.png",
                        "text": "Let's move the cat to the left when the left arrow key is pressed. \n\n\tClick on your cat sprite, and add the following code:\n\n\t```scratch\n\twhen [left arrow v] key pressed?\n\tchange x by (-10)\n\t```\n\n\tNotice that you need to change the x coordinate to move the cat to the left."
                    },
                    {
                        "text": "Test out your cat by pressing the left arrow key. You should see your cat move towards the left of the stage."
                    },
                    {
                        "text": "To move the cat upwards when the up arrow key is pressed, you'll need to add some more code:\n\n\t```scratch\n\twhen [up arrow v] key pressed?\n\tchange y by (10)\n\t```"
                    },
                    {
                        "text": "Test your project again to make sure that your new code works!"
                    }
                ],
                "number": "1",
                "title": "Controlling the cat",
                "description": "Let's allow the player to control the cat with the arrow keys."
            },
            {
                "number": "",
                "title": "More movement",
                "challenge": true,
                "description": "Can you add more code to your cat sprite, so that it moves up, down, left and right?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-planet.png",
                        "text": "+ Click 'Add new sprite from library' and add the 'Planet2' sprite to your stage. You can change the size of the planet if you want to."
                    },
                    {
                        "text": "Add this code to make the planet move around the stage forever:\n\n\t```scratch\n\twhen flag clicked\n\tforever\n\t\tmove (2) steps\n\t\tif on edge, bounce\n\tend\n\t```"
                    },
                    {
                        "text": "Click the green flag to test our your new planet. It should move left and right across the stage.\n\n\tHave you noticed that your planet turns upside-down (rotates) when it hits the edge of the screen? To fix this, just add this code to your planet sprite:\n\n\t```scratch\n\tset rotation style [don't rotate v]\n\t```"
                    },
                    {
                        "text": "The game should end when the planet touches the cat, so let's add this code __inside__ the planet's `forever` loop:\n\n\t```scratch\n\tif <touching [Cat1 v]?> then\n\t\tstop [all v]\n\tend\n\t```\n\n\tHere's how your planet's code should look:\n\n\t```scratch\n\twhen flag clicked\n\tforever\n\t\tmove (2) steps\n\t\tif on edge, bounce\n\t\tif <touching [Cat1 v]?> then\n\t\t\tstop [all v]\n\t\tend\n\tend\n\t```"
                    },
                    {
                        "text": "Test your game again - does the game end when the planet hits the cat?"
                    }
                ],
                "number": "2",
                "title": "Space junk!",
                "description": "Let's add some space junk for the cat to avoid."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-move-help.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "Changing your planet's orbit",
                "challenge": true,
                "description": "Can you change the way your planet moves? You can use these blocks to help you, as well as any other blocks you like."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-earth.png",
                        "text": "+ Firstly, let's add the Earth sprite to the center of your stage."
                    },
                    {
                        "text": "Add this code to your Earth sprite, so that it starts off very small and slowly get's bigger and bigger:\n\n\t```scratch\n\twhen flag clicked\n\tset size to (10) %\n\tforever\n\t\tchange size by (0.3)\n\tend\n\t```"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-earth-big.png",
                        "text": "Test out your Earth sprite. It should look as if your cat is slowly floating towards Earth!"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-time.png",
                        "text": "Click on your stage, and create a new variable to store the time.\n\n\tYou should now see your timer in the top-left of the stage."
                    },
                    {
                        "text": "Add this code to your stage, so that the timer counts up forever:\n\n\t```scratch\n\twhen flag clicked\n\tforever\n\t\twait (0.1) secs\n\t\tchange [time v] by (0.1)\n\tend\n\t```"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-time-test.png",
                        "text": "Click the green flag and you should see your timer start to count up!"
                    },
                    {
                        "text": "The game is won if the cat can avoid the space junk for 30 seconds.\n\n\tFor this to work, you just need to set your timer to 0 at the start of the game, and then wait until the timer gets to 30.\n\n\tClick on your cat sprite, and add this script:\n\n\t```scratch\n\twhen flag clicked\n\tset [time v] to [0]\n\twait until <(time) > [30]>\n\tsay [I made it!] for (2) secs\n\tstop [all v]\n\t```"
                    }
                ],
                "number": "3",
                "title": "Getting back to Earth",
                "description": "Can you avoid the space junk for 30 seconds, and get back to Earth safely?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-more-junk.png",
                        "text": "See if you can make each sprite moves differently."
                    }
                ],
                "number": "",
                "title": "More space junk",
                "challenge": true,
                "description": "Can you add more enemy sprites to your game, for the cat to avoid? You could add rocks, aliens, or anything else you like!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Additional%20Projects/Space%20Junk/sj-mouse.png",
                        "text": "You could even let one of your players use the mouse to control their character. Here are some blocks that may help you:"
                    }
                ],
                "number": "",
                "title": "2 players",
                "challenge": true,
                "description": "Can you improve your game, so that one of your enemy sprites is controlled by another player? They could use the w, a, s and d keys to control the enemy."
            }
        ],
        "description": "Help the Scratch mascot avoid the space junk and return safely back to Earth!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/59295958/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-final.png",
        "title": "Memory",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-sprite.png",
                        "text": "Choose a character and a backdrop. Your character doesn't have to be a person, but it needs to be able to show different colours."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-costume.png",
                        "text": "In your game, you'll use a different number to represent each colour:\n\n\t+ 1 = red;\n\t+ 2 = blue;\n\t+ 3 = green;\n\t+ 4 = yellow.\n\n\tGive your character 4 different colour costumes, one for each of the 4 colours above. Make sure that your coloured costumes are in the right order."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-list.png",
                        "text": "To create a random sequence, you need to create a __list__. A list is just a variable that stores lots of data __in order__. Create a new list called `sequence` . As only your character needs to see the list, we can also click 'For this sprite only'.\n\n\tYou should now see your empty list in the top-left of your stage, as well as lots of new blocks for using lists."
                    },
                    {
                        "text": "Add this code to your character, to add a random number to your list (and show the correct costume) 5 times:\n\n\tNotice that you have also emptied the list to begin with.",
                        "blocks": "when flag clicked\n\t\tdelete (all v) of [sequence v]\n\t\trepeat (5)\n\t\t\tadd (pick random (1) to (4)) to [sequence v]\n\t\t\tswitch costume to (item (last v) of [sequence v]\n\t\t\twait (1) secs\n\t\tend"
                    }
                ],
                "number": "1",
                "title": "Random colours",
                "description": "First, let's create a character that can change to a random sequence of colours for the player to memorise."
            },
            {
                "components": [
                    {
                        "text": "Can you make a different drum sound play depending on the random number chosen? This will be _very_ similar to your code to change the character's costume."
                    }
                ],
                "number": "",
                "title": "Adding sound",
                "challenge": true,
                "description": "Test your project a few times. You may notice that sometimes the same number is chosen twice (or more) in a row, making the sequence harder to memorise. Can you make a drum sound play each time the character changes costume?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-drums.png",
                        "text": "+ Add 4 sprites to your project, that will become buttons. Edit your 4 sprites, so that there's 1 for each of the 4 colours."
                    },
                    {
                        "text": "When the red drum is clicked, you'll need to broadcast a message to your character, letting them know that the red button has been clicked. Add this code to your red drum:",
                        "blocks": "when this sprite clicked\n\t\tbroadcast [red v]"
                    },
                    {
                        "text": "When your character receives this message, they should check whether the number 1 is at the start of the list (which means that red is the next colour in the sequence). If it is, you can remove the number from the list, as it's been guessed correctly. Otherwise it's game over!",
                        "blocks": "when I receive [red v]\n\t\tif <(item (1 v) of [sequence v])=[1]> then\n\t\t\tdelete (1 v) of [sequence v]\n\t\telse\n\t\t\tsay [Game over!] for (1) secs\n\t\t\tstop [all v]\n\t\tend"
                    },
                    {
                        "text": "You could also display some flashing lights once the list is empty, as it means the entire sequence has been guessed correctly. Add this code to the end of your character's `when flag clicked` script:",
                        "blocks": "wait until < (length of [sequence v]) = [0]>\n\t\tbroadcast [won v] and wait"
                    },
                    {
                        "text": "Click on your stage, and add this code to make the backdrop change colour once the player has won.",
                        "blocks": "when I receive [won v]\n\t\tplay sound [drum machine v]\n\t\trepeat (50)\n\t\t\tchange [color v] effect by (25)\n\t\t\twait (0.1) secs\n\t\tend\n\t\tclear graphic effects"
                    }
                ],
                "number": "2",
                "title": "Repeating the sequence",
                "description": "Let's add 4 buttons, for the player to repeat the sequence they've remembered."
            },
            {
                "components": [
                    {
                        "text": "You can also add sounds for when the buttons are pressed.\n\nRemember to test the code you've added! Can you memorise a sequence of 5 colours? Is the sequence different each time?"
                    }
                ],
                "number": "",
                "title": "Creating 4 buttons",
                "challenge": true,
                "description": "Repeat the steps above for your blue, green and yellow buttons. Which code will stay the same, and which code will change for each button?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-score.png",
                        "text": "+ Create a new variable called `score` ."
                    },
                    {
                        "text": "This `score` code:",
                        "blocks": "set [score v] to [3]"
                    },
                    {
                        "text": "Instead of always creating a sequence of 5 colours, you now want the `score` loop (for creating the sequence) to:",
                        "blocks": "repeat (score)\n\t\tend"
                    },
                    {
                        "text": "If the sequence is guessed correctly, you should add 1 to the score, to increase the length of the sequence.",
                        "blocks": "change [score v] by (1)"
                    },
                    {
                        "text": "Finally, you need to add a `forever` loop around the code to generate the sequence, so that a new sequence is created for each level. This is how your character's code should look:",
                        "blocks": "when flag clicked\n\t\tset [score v] to [3]\n\t\tforever\n\t\t\tdelete (all v) of [sequence v]\n\t\t\trepeat (score)\n\t\t\t\tadd (pick random (1) to (4)) to [sequence v]\n\t\t\t\tswitch costume to (item (last v) of [sequence v]\n\t\t\t\twait (1) secs\n\t\t\tend\n\t\t\twait until < (length of [sequence v]) = [0]>\n\t\t\tbroadcast [won v] and wait\n\t\t\tchange [score v] by (1)\n\t\tend"
                    },
                    {
                        "text": "Get your friends to test out your game. Remember to hide the `sequence` list before they play it!"
                    }
                ],
                "number": "3",
                "title": "Multiple levels",
                "description": "So far, the player only has to remember 5 colours. Let's improve your game, so that the length of the sequence increases."
            },
            {
                "components": [
                    {
                        "text": "+ Add 2 new variables to your project, called `high score` ."
                    },
                    {
                        "text": "If ever the game ends (by pressing the wrong button), you need to check whether the player's score is higher than the current high score. If it is, you need to save the score as the high score, and store the name of the player. Here's how your red button should look:",
                        "blocks": "when I receive [red v]\n\t\tif <(item (1 v) of [sequence v])=[1]> then\n\t\t\tdelete (1 v) of [sequence v]\n\t\telse\n\t\t\tsay [Game over!] for (1) secs\n\t\t\tif < (score) > (high score) > then\n\t\t\t\tset [high score v] to (score)\n\t\t\t\task [High score! What is your name?] and wait\n\t\t\t\tset [name v] to (answer)\n\t\t\tend\n\t\t\tstop [all v]\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-same.png",
                        "text": "You'll need to add this new code to the other 3 buttons too! Have you noticed that the 'Game over' code in each of the 4 buttons is exactly the same?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-more.png",
                        "text": "If ever you need to change any of this code, such as adding a sound or changing the 'Game over!' message, you'd have to change it 4 times! That could get annoying, and waste a lot of time.\n\n\tInstead, you can define your own blocks, and reuse them in your project! To do this, click `more blocks` , and then 'Make a block'. Call this new block 'Game over'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-make-block.png",
                        "text": "Add the code from the `else` block from the red button to the new block that appears:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-use-block.png",
                        "text": "You've now made a new _function_ called `Game over` block onto the 4 scripts for the buttons."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-cough.png",
                        "text": "Now add a sound for when the wrong button is pressed. You only need to add this code _once_ in the `Game over` block that you made, and not 4 separate times!"
                    }
                ],
                "number": "4",
                "title": "High score",
                "description": "Let's save the high score, so that you can play against your friends."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-more-blocks.png",
                        "text": "Can you make another custom block, that is used by each button?"
                    }
                ],
                "number": "",
                "title": "Making more blocks",
                "challenge": true,
                "description": "Do you notice any other code that is the same for all 4 buttons?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Memory/colour-white.png",
                        "text": "Can you add another plain white costume to your character, which is displayed at the start of your game, and when the player is trying to copy the sequence?"
                    }
                ],
                "number": "",
                "title": "Another costume",
                "challenge": true,
                "description": "Have you noticed that your game starts with your character showing one of the 4 colours, and that they always display the last colour in the sequence while the player is repeating the sequence?"
            },
            {
                "components": [
                    {
                        "text": "You could even add a 'hard' mode, which makes use of a 5th drum!"
                    }
                ],
                "number": "",
                "title": "Difficulty level",
                "challenge": true,
                "description": "Can you allow your player to choose between 'easy mode' (using just the red and blue drums) and 'normal mode' (which uses all 4 drums)?"
            }
        ],
        "description": "In this project, you will create a memory game where you have to memorise and repeat a sequence of random colours!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/34874510/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-final.png",
        "title": "Lost in Space",
        "link": "http://jumpto.cc/space-resources",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-sprites.png",
                        "text": "Add 'Spaceship' and 'Earth' sprites to your stage. You should also add the 'Stars' backdrop to your stage. This is how your stage should look:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-costume.png",
                        "text": "Click on your new spaceship sprite, and click the 'Costumes' tab."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-rotate.png",
                        "text": "Use the arrow tool to select the image. Then click on the circular rotate handle, and rotate the image until it is on its side."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-animate.png",
                        "text": "Add this code to your spaceship sprite:\n\n\tChange the numbers in the code blocks, so that the code is exactly the same as in the image above."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-animate-stage.png",
                        "text": "If you click on the code blocks to run the code, you should see the spaceship speak, turn and move towards the centre of the stage.\n\n\tThe screen position `x:(0) y:(0)` is near the top-right.\n\n\tIf you need to know the coordinates of a position on the stage, move the mouse to the position you want and make a note of the coordinates, which are displayed below the stage."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-flag.png",
                        "text": "Try out your animation, by clicking on the green flag just above the stage."
                    }
                ],
                "number": "1",
                "title": "Animating a spaceship",
                "description": "Let's make a spaceship that flies towards the Earth!"
            },
            {
                "components": [
                    {
                        "text": "+ The spaceship moves until it touches the Earth?"
                    },
                    {
                        "text": "The spaceship moves more slowly towards the Earth?\n\nYou'll need to change the numbers in this block:",
                        "blocks": "glide (1) secs to x:(0) y:(0)"
                    }
                ],
                "number": "",
                "title": "Improving your animation",
                "challenge": true,
                "description": "Can you change the numbers in your animation code, so that:"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-delete-glide.png",
                        "text": "+ Delete the `glide` block from your code, by right-clicking on the block and clicking 'delete'. You can also delete code by dragging it off the script area, back into the code blocks area."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-loop.png",
                        "text": "Once you've removed your code, add this code instead:\n\n\tThe `repeat` block is used to repeat something lots of times, and is also known as a __loop__."
                    },
                    {
                        "text": "If you click the flag to try out this new code, you'll see that it does pretty much the same thing as before."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-colour.png",
                        "text": "You can add more code to your loop, to do interesting things. Add the `change color effect by 25` block into the loop (from the 'Looks' section), to repeatedly change the colour of the spaceship as it moves:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-colour-test.png",
                        "text": "Click the flag to see your new animation."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-size.png",
                        "text": "You can also make your spaceship get smaller as it moves towards the Earth."
                    },
                    {
                        "text": "Test out your animation. What happens if you click the flag a second time? Does your spaceship start off the right size? Can you use this block to fix your animation:\n\n\t```scratch\n\tset size to (100) %\n\t```"
                    }
                ],
                "number": "2",
                "title": "Animating using loops",
                "description": "Another way of animating the spaceship is to tell it to move a small amount, lots of times."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-monkey.png",
                        "text": "+ Start by adding in the monkey sprite from the library."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-monkey-edit.png",
                        "text": "If you click on your new monkey sprite and then click 'Costumes', you can edit how the monkey looks. Click the 'Ellipse' tool, and draw a white space helmet around the monkey's head."
                    },
                    {
                        "text": "Now click 'Scripts', and add this code to the monkey, so that it spins slowly in a circle forever:\n\n\tThe `forever` block is another loop, but this time one that never ends.",
                        "blocks": "when FLAG clicked\n\t\tforever\n\t\t    turn right (1) degrees\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-monkey-loop.png",
                        "text": "Click the flag to test your monkey. You'll have to click the stop button (next to the flag) to end this animation."
                    }
                ],
                "number": "3",
                "title": "Floating Monkey",
                "description": "Let's add monkey to your animation, who's lost in space!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-rock-sprite.png",
                        "text": "+ Add a 'rock' sprite to your animation."
                    },
                    {
                        "text": "Add this code to your rock, to make it bounce around the stage:\n\n\t```scratch\n\twhen flag clicked\n\tpoint towards [Earth v]\n\tforever\n\t\tmove (2) steps\n\t\tif on edge, bounce\n\t```"
                    },
                    {
                        "text": "Click the flag to test your rock. Does it bounce around the stage?"
                    }
                ],
                "number": "4",
                "title": "Bouncing Asteroids",
                "description": "Let's add some floating space-rock to your animation."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-star-sprite.png",
                        "text": "+ Add a 'star' sprite to your animation"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-star.png",
                        "text": "Add this code to your star:"
                    },
                    {
                        "text": "Click the flag to test out this star animation. What does this code do? Well, the star is made slightly bigger 20 times, and then made slightly smaller 20 times, back to it's original size. These 2 loops are inside a `forever` loop, so the animation keeps repeating."
                    }
                ],
                "number": "5",
                "title": "Shining Stars",
                "description": "Let's combine loops to make a shining star."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Lost%20in%20Space/space-egs.png",
                        "text": "Use what you've learnt in this project to make your own animation. It can be anything you like, but try to make your animation match the setting. Here are some examples:"
                    }
                ],
                "number": "",
                "title": "Make your own animation",
                "challenge": true,
                "description": "Stop your space animation, and click 'File' and then 'New', to start a new project."
            }
        ],
        "description": "You are going to learn how to program your own animation!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26818098/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Archived%20Projects/Felix%20and%20Herbert/felixherbert_screenshot.png",
        "title": "Felix and Herbert",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new project."
                    },
                    {
                        "text": "Click on the **stage** next to the sprite and switch to the `Backdrops` tab, and then click the `Choose Backdrop from library` button and choose the backdrop indoors/hall. Delete the original blank backdrop."
                    },
                    {
                        "text": "Click on the sprite, and then click on the `i` button to the top left of the Sprite. Change the name of the sprite to **Felix**."
                    },
                    {
                        "text": "Make sure Felix only points left-right by clicking this button: <img alt=\"\" class=\"inline\" src=\"flip_arrows.png\">"
                    },
                    {
                        "text": "Create this script:",
                        "blocks": "when FLAG clicked\n    forever\n        point towards [mouse-pointer v]\n        move (10) steps\n        next costume\n        play drum (3 v) for (0.3) beats\n    end"
                    }
                ],
                "number": "1",
                "title": "Felix follows the mouse pointer",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Create another sprite using the `choose sprite from library` button and selecting **animals/mouse1**."
                    },
                    {
                        "text": "Change the name of the sprite to **Herbert**."
                    },
                    {
                        "text": "Switch to the __Costumes__ tab, then click on the costume in the Paint Editor. A box will appear around the costume. Drag a corner of the box to make Herbert smaller than Felix."
                    },
                    {
                        "text": "Make sure Herbert only points left-right by clicking this button: <img alt=\"\" class=\"inline\" src=\"flip_arrows.png\">"
                    },
                    {
                        "text": "**Give Herbert this script:**",
                        "blocks": "when FLAG clicked\n    forever\n        go to [mouse-pointer v]\n        point towards [Felix v]\n    end"
                    }
                ],
                "number": "2",
                "title": "Felix chases Herbert",
                "description": "Next, we want Felix to chase Herbert the mouse, rather than the mouse pointer."
            },
            {
                "components": [
                    {
                        "text": "+ Change Felix\u2019s script to be this:",
                        "blocks": "when FLAG clicked\n    forever\n        point towards [mouse-pointer v]\n        move (10) steps\n        next costume\n        play drum (3 v) for (0.3) beats\n        if <touching [herbert v]?>\n            say [Caught you!] for (1) secs\n        end\n    end"
                    }
                ],
                "number": "3",
                "title": "Felix says when he\u2019s caught Herbert",
                "description": "We want Felix to know when he\u2019s caught Herbert, and tell us."
            },
            {
                "components": [
                    {
                        "text": "+ Change Felix\u2019s script to send this message when he catches Herbert:",
                        "blocks": "when FLAG clicked\n    forever\n        point towards [mouse-pointer v]\n        move (10) steps\n        move (20) steps\n        next costume\n        play drum [3 v] for (0.3) beats\n        if <touching [herbert v]?> then\n            broadcast [caught v]\n            play drum [17 v] for (0.2) beats\n            wait (1) secs\n        end\n    end"
                    },
                    {
                        "text": "Add a new costume into Herbert by selecting Herbert, going into the Costumes section, and clicking the `Choose costume from Library button ` . Select the **fantasy/ghost2-a** costume."
                    },
                    {
                        "text": "Make the costume smaller by clicking on it in the Paint Editor, and dragging the box that appears, to resize it."
                    },
                    {
                        "text": "Change the names of Herbert\u2019s costumes so the mouse costume is called \u2018alive\u2019 and the ghost costume is called \u2018dead\u2019."
                    },
                    {
                        "text": "Create a new script for Herbert to turn him into a ghost:",
                        "blocks": "when I receive [caught v]\n        switch costume to [dead v]\n        wait (1) secs\n        switch costume to [alive v]"
                    }
                ],
                "number": "4",
                "title": "Herbert turns into a ghost when he\u2019s caught",
                "description": "Instead of Felix saying something, we want Herbert to turn into a ghost when he\u2019s caught."
            },
            {
                "components": [
                    {
                        "text": "+ Make a variable, for all sprites, called Score. Click on `Data` , ensuring that \"For all sprites\" is selected."
                    },
                    {
                        "text": "On the stage, create these two scripts:",
                        "blocks": "when gf clicked\n        set [score v] to [0]\n        forever\n            change [score v] by (1)\n            wait (1) secs\n        end\n\n    when I receive [caught v]\n        change [score v] by (-100)"
                    }
                ],
                "number": "5",
                "title": "Keep score",
                "description": "Let\u2019s add a score so we know how well we do at keeping Herbert alive.\n\nWe\u2019ll start the score at zero and increase it by one every second. If Felix catches Herbert, we\u2019ll reduce the score by one hundred."
            }
        ],
        "description": "We are going to make a game of catch with __Felix the cat__ and __Herbert__ the mouse. You control Herbert with the mouse and try to avoid getting caught by Felix. The longer you avoid him the more points you score, but don\u2019t get caught because your score will go down!"
    },
    {
        "steps": [
            {
                "components": [
                    {
                        "text": "+ To stop the ghost getting stuck we need to make her go back the other way when she touches the edge of the screen. Edit your existing script by adding an `if on edge, bounce` block.",
                        "blocks": "when FLAG clicked\n        set [speed v] to [5]\n        forever\n            move (speed) steps\n            if on edge, bounce"
                    },
                    {
                        "text": "To stop the ghost flipping upside down, click on the `rotation style: left-right` button in the (i) section of the Sprite Summary area for the ghost sprite."
                    }
                ],
                "extensions": [
                    {
                        "text": "+ Try changing the value of the speed variable to make the ghost fly faster or slower."
                    },
                    {
                        "text": "How would you make the ghost get faster the longer it's flying? (This is a tricky one, so don\u2019t worry if you can\u2019t see how to do it. You\u2019ll get more clues as you work through the project.)"
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag."
                    },
                    {
                        "text": "Does the ghost move from side to side across the screen?"
                    }
                ],
                "number": "1",
                "title": "Create a flying ghost",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Create this script for the ghost:",
                        "blocks": "when FLAG clicked\n    forever\n        hide\n        wait (pick random (2) to (5)) secs\n        show\n        wait (pick random (3) to (5)) secs"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ Try changing the range of the random numbers. What happens if you pick very big numbers or very small numbers? (Does this give you any more clues for how to make the ghost speed up the longer the game is played?)"
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag."
                    },
                    {
                        "text": "Does the ghost move from side to side across the screen and vanish and appear again randomly?"
                    }
                ],
                "number": "2",
                "title": "Make the ghost appear & vanish randomly",
                "description": "To make the game more fun, we want the ghost to appear and vanish randomly. We\u2019ll do that with another script that runs at the same time as the one that moves the ghost. This new script needs to hide the ghost for a random time, then show it for a random time, and repeat that forever (or until the game finishes)."
            },
            {
                "components": [
                    {
                        "text": "+ In the **Sounds** tab, add a new sound **Electronic/fairydust**, using the `Choose sound from library` button."
                    },
                    {
                        "text": "Add this script to the ghost:",
                        "blocks": "when this sprite clicked\n        hide\n        play sound [Fairydust v]"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ Ask your volunteer if you can record your own sound to play."
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag."
                    },
                    {
                        "text": "Does the ghost disappear and play the sound when you click it?"
                    }
                ],
                "number": "3",
                "title": "Make the ghost disappear when it's clicked",
                "description": "To turn this into a game, we need to give the player something to do. They need to click on the ghost to make it disappear. When the ghost is clicked, we want it to disappear and play a sound."
            },
            {
                "components": [
                    {
                        "text": "+ Create a new `Variable` for all sprites called **score**, and alter the script for the ghost to increase this variable by one when it is clicked.",
                        "blocks": "when this sprite clicked\n    \thide\n\t   play sound [Fairydust v]\n\t   change [score v] by (1)"
                    },
                    {
                        "text": "Switch to the **Stage** and create a **new variable** called **time_left**."
                    },
                    {
                        "text": "Add a new script that occurs when the green flag is clicked to set `time_left` to stop the game.",
                        "blocks": "when FLAG clicked\n    \tset [time_left v] to (30)\n    \tset [score v] to (0)\n    \trepeat until <(time_left) = [0]>\n    \t\twait (1) secs\n    \t\tchange [time_left v] by (-1)\n    \tend\n    \tstop [all v]"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ How might you make the ghost speed up as the game goes on?\n\nWell done you\u2019ve finished the basic game. There are more things you can do to your game though. Have a go at this challenge!"
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag."
                    }
                ],
                "number": "4",
                "title": "Add a score and timer",
                "description": "We\u2019ve got a ghost, but now we want to make a game! We want to score points every time we click on the ghost but we also want to have a time limit on the game. We can use a variable for the score and the timer."
            },
            {
                "components": [
                    {
                        "text": "1. Duplicate the ghost by **right-clicking** it in the sprite list.\n2. For each ghost **adjust the size of the sprite** so the ghosts are different sizes.\n3. For each ghost change the **speed variable** so that they fly at different speeds.\n4. Move the ghosts around the canvas so that they are not all together."
                    }
                ],
                "number": "",
                "title": "add more ghosts",
                "challenge": true,
                "description": "If one ghost is good, more must be better! Let\u2019s have three ghosts flying around."
            }
        ],
        "description": "This project is like the game __Whack-a-Mole__. You get points for hitting the ghosts that appear on the screen. The aim is to get as many points as possible in 30 seconds!",
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Archived%20Projects/Ghostbusters/ghostbsuters_screenshot.png",
        "title": "Ghostbusters"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-final.png",
        "title": "ChatBot",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Before you start making your chatbot, you need to decide on their personality.\n\t+ What is their name?\n\t+ Where do they live?\n\t+ Are they happy? serious? funny? shy? friendly?"
                    },
                    {
                        "text": "Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-characters.png",
                        "text": "Choose one of these character sprites, and add them to your project:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-sprite.png",
                        "text": "Choose a backdrop that fits your chatbot's personality. Here's an example, although yours doesn't have to look like this:"
                    }
                ],
                "number": "1",
                "title": "Your chatbot",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Click on your chatbot character, and add this code:",
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tsay [What a lovely name!] for (2) secs"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-text.png",
                        "text": "Click your chatbot to test it out. After you are asked your name, type it into the box along the bottom of the stage."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-join.png",
                        "text": "Your chatbot simply replies `What a lovely name!` every time. You can personalise your chatbot's reply, by making use of the user's answer. Change the chatbot's code, so that it looks like this:\n\n\tTo create the last block, you'll need to first drag on a green `join` block.\n\n\tYou can then change the text `hello` to say `Hi`, and drag the light blue `answer` block (from the 'Sensing' section) onto the text `world`.",
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tsay <join [Hi] (answer)> for (2) secs"
                    },
                    {
                        "text": "Test out this new program. Does it work as you expected? Can you fix any problems that you can see? (Hint: you can try adding in a space somewhere!)"
                    },
                    {
                        "text": "It may be that you want to store the user's name in a variable, so that you can use it again later. Create a new variable called `name` . If you've forgotten how to do this, the 'Balloons' project will help you."
                    },
                    {
                        "text": "The information that you entered is already stored in a special variable called `answer` should then be shown on the top-left of the stage."
                    },
                    {
                        "text": "Once you've created your new variable, make sure that your chatbot's code looks like this:",
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tset [name v] to (answer)\n\t\tsay <join [Hi ] (name)> for (2) secs"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-variable.png",
                        "text": "If you test your program again, you'll notice that the answer is stored in the `name` variable.\n\n\tIf you'd rather not see the variables on your stage, you can click the tick next to the variable names in the 'Scripts' tab to hide them."
                    }
                ],
                "number": "2",
                "title": "A talking chatbot",
                "description": "Now that you have a chatbot with a personality, let's program it to talk to you."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-question.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "More questions",
                "challenge": true,
                "description": "Program your chatbot to ask another question. Can you store their answer in a variable?"
            },
            {
                "components": [
                    {
                        "text": "+ Let's get your chatbot to ask the user a question which has a `yes` or `no` answer. Here's an example, but you can change the question if you like:\n\n\tNotice that now you've stored the user's name in a variable, you can use it as much as you like.",
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tset [name v] to (answer)\n\t\tsay <join [Hi ] (name)> for (2) secs\n\t\task <join [Are you OK ] (name)> and wait\n\t\tif ((answer)=[yes]) then\n\t\t\tsay [That's great to hear!] for (2) secs\n\t\tend"
                    },
                    {
                        "text": "To test this program properly, you'll need to test it twice - once typing `no` as your answer, and once typing `yes`. You should only get a response from your chatbot `if` you answer `yes`."
                    },
                    {
                        "text": "The trouble with your chatbot is that it doesn't give a reply if the user answers `no`. You can fix this, by changing the `if` block, so that your code now looks like this:",
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tset [name v] to (answer)\n\t\tsay <join [Hi ] (name)> for (2) secs\n\t\task <join [Are you OK ] (name)> and wait\n\t\tif ((answer)=[yes]) then\n\t\t\tsay [That's great to hear!] for (2) secs\n\t\telse\n\t\t\tsay [Oh no!] for (2) secs\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-else.png",
                        "text": "If you test your code, you'll now see that you get a response when you answer `yes` or `no`. Your chatbot should reply with `That's great to hear!` when you answer `yes`, but will reply with `Oh no!` if you type anything other than `yes` (`else` means 'otherwise')."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-costumes.png",
                        "text": "You can put any code inside an `if` block, not just code to make your chatbot speak. For example, you can change the chatbot's costume to match the response.\n\n\tIf you have a look at your chatbot's costumes, you may see that there is more than one. (If not, you can always add more yourself!)\n\n\tYou can use these costumes as part of your chatbot's response, by adding this code:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-face.png",
                        "text": "Test out your program, and you should see your chatbot's face change depending on the answer you give."
                    }
                ],
                "number": "3",
                "title": "Making decisions",
                "description": "You can program your chatbot to decide what to do, based on the user's responses."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-joke.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "More decisions",
                "challenge": true,
                "description": "Program your chatbot to ask another question - something with a `yes` or `no` answer. Can you make your chatbot respond to the answer?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-moon.png",
                        "text": "+ Add another backdrop to your stage, for example the 'moon' backdrop."
                    },
                    {
                        "text": "You can now program your chatbot to change location, by adding this code to your chatbot:",
                        "blocks": "ask [I'm going to the moon. Do you want to come with me?] and wait\n\t\tif ((answer) = [yes]) then\n\t\t\tswitch backdrop to [moon v]\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-outside.png",
                        "text": "You also need to make sure that your chatbot is outside when you start talking to it. Add this block to the top of your chatbot code:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-backdrop.png",
                        "text": "Test your program, and answer `yes` when asked if you want to go to the moon. You should see that the chatbot's location has changed."
                    },
                    {
                        "text": "Does your chatbot change location if you type `no`? What about if you type `I'm not sure`?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-loop.png",
                        "text": "You can also add this code inside your `if` block, to make your chatbot jump up and down 4 times if the answer is `yes`:\n\n\t```scratch\n\trepeat (4)\n\t\tchange y by (10)\n\t\twait (0.1) secs\n\t\tchange y by (-10)\n\t\twait (0.1) secs\n\tend\n\t```"
                    },
                    {
                        "text": "Test your code again. Does your chatbot jump up and down if you answer `yes`?"
                    }
                ],
                "number": "4",
                "title": "Changing location",
                "description": "You can also program your chatbot to change its location."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/ChatBot/chatbot-ideas.png",
                        "text": "Once you've finished making your chatbot, get your friends to have a conversation with it! Do they like your character? Did they spot any problems?"
                    }
                ],
                "number": "",
                "title": "Make your own chatbot",
                "challenge": true,
                "description": "Use what you've learnt to finish creating your interactive chatbot. Here are some ideas:"
            }
        ],
        "description": "You are going to learn how to program your own talking robot!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26762091/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Archived%20Projects/Fish%20Chomp/fishchomp_screenshot.png",
        "title": "Fish Chomp",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project."
                    },
                    {
                        "text": "Select the Stage, then select the Stage\u2019s Backdrop tab. Import the background **Nature/underwater3** using `choose background from library`. Finally, remove **backdrop1**."
                    },
                    {
                        "text": "Change the name of Sprite1 to **Hungry Fish** by clicking on the blue `i` symbol."
                    },
                    {
                        "text": "Import Hungry Fish\u2019s costume, **resources/hungry-fish.png** then remove its existing **costume1** and **costume2**."
                    },
                    {
                        "text": "Click on the blue '**i**' symbol again,  and make sure the sprite can only flip left-right."
                    },
                    {
                        "text": "Now create a script for Hungry Fish to follow the mouse around the sea like this:",
                        "blocks": "when FLAG clicked\n        forever\n            point towards [mouse pointer v]\n            move (3) steps"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ If you want, you can put different numbers in the script. How does that change how Hungry Fish moves?"
                    },
                    {
                        "text": "Change the distance threshold to a large number (e.g. 100), or a small number (e.g. 1)."
                    },
                    {
                        "text": "Change the amount the fish moves to a large number (e.g. 20) or a small number (e.g. 1 or even 0)."
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag."
                    },
                    {
                        "text": "Move the mouse pointer around the sea. Does the fish follow the pointer?"
                    },
                    {
                        "text": "What happens if you don\u2019t move the mouse pointer and the fish catches up with it? What does it look like? Why does it do this?"
                    },
                    {
                        "text": "You can stop the Hungry Fish flipping like crazy if you make it only move when it\u2019s not too near the mouse pointer (The `distance to` block is in the `Sensing` palette).",
                        "blocks": "when FLAG clicked\n        forever\n            if <(distance to [mouse-pointer v]) > (10)> then\n                point towards [mouse-pointer v]\n                move (3) steps"
                    }
                ],
                "number": "1",
                "title": "Create a sprite that follows the mouse",
                "description": "**Let\u2019s make the Hungry Fish swim around the sea!**"
            },
            {
                "components": [
                    {
                        "text": "+ Create a new sprite from the library, using **Animals/starfish**."
                    },
                    {
                        "text": "Use the `Shrink` sprite tool (above the Stage) to make the sprite smaller."
                    },
                    {
                        "text": "Create a script to make the prey swim around. We want them to move randomly, so let\u2019s make it move forward a bit, then turn a random amount left or right, then do it again.",
                        "blocks": "when FLAG clicked\n        forever\n            move (2) steps\n            turn right (pick random (-20) to (20)) degrees\n            if on edge, bounce"
                    }
                ],
                "extensions": [
                    {
                        "text": "+ Try changing the numbers in the `pick random` and move blocks. How do they make the prey move differently?"
                    },
                    {
                        "text": "What does the `if on edge, bounce` block do? Take it out and see what happens."
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag and watch the prey swim around. Does it swim like you expect? Does it swim realistically?\n\nAt the moment, the Hungry Fish and the prey don\u2019t interact with each other. We\u2019ll sort that out in the next step."
                    }
                ],
                "number": "2",
                "title": "Add some prey",
                "description": "It's time to make something for the Hungry Fish to try to eat!"
            },
            {
                "components": [
                    {
                        "text": "+ First, let\u2019s make the prey disappear if it is touching the Hungry Fish, and then reappear 3 seconds later. Use the `touching` block to see if it is touching the fish.",
                        "blocks": "forever\n\t\tmove (2) steps\n\t\tturn right (pick random (-20) to (20)) degrees\n\t\tif on edge, bounce\n\t\tif <touching [Hungry Fish v]?> then\n\t\t\thide\n\t\t\twait (3) secs\n\t\t\tshow"
                    }
                ],
                "tests": [
                    {
                        "text": "Click the green flag."
                    },
                    {
                        "text": "Does the Hungry Fish eat the prey? Does it eat each of the different prey?"
                    }
                ],
                "number": "3",
                "title": "Hungry Fish eats the prey",
                "description": "Now we want to make the Hungry Fish eat the prey! Once the Hungry Fish has caught the prey in its mouth, two things need to happen:\n\n* The Hungry Fish needs to close its mouth and make a \"chomp\" sound.\n* The prey needs to disappear, then reappear a short while later."
            },
            {
                "components": [
                    {
                        "text": "Pick one of the prey to experiment on. If they have the same costumes, make it a different colour with the `set color effect` block. That way, you can tell it apart from the rest of the prey.\n\nMake this prey move slower than the others. **Hint"
                    }
                ],
                "number": "1",
                "title": "Make the prey move differently",
                "challenge": true,
                "description": "At the moment, all the prey move in the same way. Can you make one of them move differently? **Hint:** Don\u2019t spend too long on this bit without looking at the other activities in this project."
            },
            {
                "components": [
                    {
                        "text": "There\u2019s no block in Scratch that tells you the direction that another sprite is in. But you can make one sprite point towards another, then make it turn around to face away. The blocks you need are in the `Motion` palette.\n\nUsing that idea, make one of the prey always point away from the Hungry Fish.\n\nYou might find that your prey gets stuck in the corner if it is always swimming away from the fish. You might want to have the prey only try to escape when the fish gets close. **Hint"
                    }
                ],
                "number": "2",
                "title": "Make the prey avoid the Hungry Fish",
                "challenge": true,
                "description": "The prey in this game are really stupid! They just swim around randomly until they\u2019re eaten. Real prey swim away from predators. Let\u2019s make one of the prey swim away from the Hungry Fish."
            },
            {
                "components": [
                    {
                        "text": "Where should you put the block that changes the score?\n\nMake sure the score goes back to zero at the start of the game. Where should you put that block?"
                    }
                ],
                "number": "3",
                "title": "Add a score",
                "challenge": true,
                "description": "It\u2019s not enough just to eat lobsters. How do you know you\u2019re better at the game than your friends? You need a way to keep score so lets add a score board. Look at the **Keep Score scratch card** for an idea of how to do it."
            },
            {
                "components": [
                    {
                        "text": "Look at the **Timer scratch card** for how to add a timer to the game. Start with the game lasting thirty seconds."
                    }
                ],
                "number": "4",
                "title": "Add a countdown",
                "challenge": true,
                "description": "Give yourself a time limit in the game. How many prey can you eat in thirty seconds?"
            },
            {
                "components": [
                    {
                        "text": "**Hint"
                    }
                ],
                "number": "5",
                "title": "Add a bonus score",
                "challenge": true,
                "description": "Award a large bonus score if you can eat all three lobsters at the same time. How can you tell how many prey have been eaten?"
            },
            {
                "components": [
                    {
                        "text": "Modify the game so that, instead of you controlling a fish that tries to eat the others, you control one prey in a sea with lots of Hungry Fish. How long can you last before you\u2019re eaten? Instead of having a score, how about giving the prey 3 lives and ending the game when they're all gone?"
                    }
                ],
                "number": "6",
                "title": "Change the game: keep a prey alive!",
                "challenge": true,
                "description": "Sometimes, you can have great new ideas by taking an existing idea and doing the opposite."
            }
        ],
        "description": "We\u2019re going to make a Fish Chomp game! Guide the large Hungry Fish and try to eat all the prey that are swimming around."
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-final.png",
        "title": "Brain Game",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-setting.png",
                        "text": "Choose a character and a backdrop for your game. You can choose any you like! Here's an example:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-variables.png",
                        "text": "Create 2 new variables called `number 1` . These variables will store the 2 numbers that will be multiplied together."
                    },
                    {
                        "text": "Add code to your character, to set both of these variables to a `random` number between 2 and 12.",
                        "blocks": "when flag clicked\n\t\tset [number 1 v] to (pick random (2) to (12))\n\t\tset [number 2 v] to (pick random (2) to (12))"
                    },
                    {
                        "text": "You can then ask the player for the answer, and let them know if they were right or wrong.",
                        "blocks": "when flag clicked\n\t\tset [number 1 v] to (pick random (2) to (12))\n\t\tset [number 2 v] to (pick random (2) to (12))\n\t\task (join (number 1)(join [ x ] (number 2))) and wait\n\t\tif <(answer) = ((number 1)*(number 2))> then\n\t\t\tsay [yes! :)] for (2) secs\n\t\telse\n\t\t\tsay [nope :(] for (2) secs\n\t\tend"
                    },
                    {
                        "text": "Test your project fully, by answering one question correctly and one with the wrong answer."
                    },
                    {
                        "text": "Add a `forever` loop around this code, so that the player is asked lots of questions."
                    },
                    {
                        "text": "Create a countdown timer on the stage, using a variable called `time` . The 'Balloons' project has instructions for making a timer (in step 6) if you need help!"
                    },
                    {
                        "text": "Test your project again - you should be able to continue asking questions until the time runs out."
                    }
                ],
                "number": "1",
                "title": "Creating questions",
                "description": "Let's start by creating random questions for the player to answer."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-costume.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "Changing costumes",
                "challenge": true,
                "description": "Can you change your character's costumes, so that they respond to the player's answer?"
            },
            {
                "number": "",
                "title": "Adding a score",
                "challenge": true,
                "description": "Can you add a score to your game? You can add a point for every correct answer. If you're feeling mean, you could even reset the player's score to 0 if they get a question wrong!"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-play.png",
                        "text": "+ Create a new 'Play' button sprite, which your player will click to start a new game. You can draw it yourself, or edit a sprite from the Scratch library."
                    },
                    {
                        "text": "Add this code to your new button.\n\n\tThis code shows the play button when your project is started. When the button is clicked, it is hidden and then broadcasts a message that will start the game.",
                        "blocks": "when flag clicked\n\t\tshow\n\n\t\twhen this sprite clicked\n\t\thide\n\t\tbroadcast [start v]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-start.png",
                        "text": "You'll need to edit your character's code, so that the game starts when they receive the `start` message, and not when the flag is clicked.\n\n\tReplace the `when flag clicked` ."
                    },
                    {
                        "text": "Click the green flag and then click your new play button to test it. You should see that the game doesn't start until the button is clicked."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-timer-bug.png",
                        "text": "Did you notice that the timer starts when the green flag is clicked, and not when the game starts? \n\n\tCan you fix this problem?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-end.png",
                        "text": "Click on the stage, and replace the `stop all` message."
                    },
                    {
                        "text": "You can now add code to your button, to show it again at the end of each game.",
                        "blocks": "when I receive [end v]\n\t\tshow"
                    },
                    {
                        "text": "You'll also need to stop your character asking questions at the end of each game:",
                        "blocks": "when I receive [end v]\n\t\tstop [other scripts in sprite v]"
                    },
                    {
                        "text": "Test your play button by playing a couple of games. You should notice that the play button shows after each game. To make testing easier, you can shorten each game, so that it only lasts a few seconds.",
                        "blocks": "set [time v] to [10]"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-fisheye.png",
                        "text": "You can even change how the button looks when the mouse hovers over it.",
                        "blocks": "when flag clicked\n\t\tshow\n\t\tforever\n\t\tif <touching [mouse-pointer v]?> then\n\t\t\tset [fisheye v] effect to (30)\n\t\telse\n\t\t\tset [fisheye v] effect to (0)\n\t\tend\n\t\tend"
                    }
                ],
                "number": "2",
                "title": "Multiple games",
                "description": "Let's add a 'play' button to your game, so that you can play lots of times."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-startscreen.png",
                        "text": "You can also show and hide your character, and even show and hide your timer by using these blocks:",
                        "blocks": "show variable [time v]"
                    }
                ],
                "number": "",
                "title": "Start screen",
                "challenge": true,
                "description": "Can you add another backdrop to your stage, which will become your game's start screen? You can use the `when I receive start` {.blockevents} and `when I receive end` {.blockevents} blocks to switch between backdrops."
            },
            {
                "number": "3",
                "title": "Adding graphics",
                "description": "Instead of your character just saying `yes! :)` or `nope :(` to the player, let's add some graphics that will let the player know how they are doing."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-effects.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "Improved animation",
                "challenge": true,
                "description": "Can you improve the animation of your graphics? You could code the tick and cross so that they fade out as well as fade in. Or, you could use other cool effects:"
            },
            {
                "components": [
                    {
                        "text": "+ Playing a sound when the player gets an answer right or wrong;"
                    },
                    {
                        "text": "Adding a ticking sound to your countdown timer;"
                    },
                    {
                        "text": "Playing a sound when the time is up;",
                        "blocks": "play drum (10 v) for (0.1) beats"
                    },
                    {
                        "text": "You could also constantly play music on a loop (if you're not sure how to do this, step 4 of the 'Rock Band' project will help you)."
                    }
                ],
                "number": "",
                "title": "Sound and music",
                "challenge": true,
                "description": "Can you add sound effects and music to your game? For example:"
            },
            {
                "components": [
                    {
                        "text": "To do this, you'll only need to change your timer code. Can you see what needs to be changed?",
                        "blocks": "when I receive [start v]\n\tset [time v] to (30)\n\trepeat until <(time) = [0]>\n\t\twait (1) secs\n\t\tchange [time v] by (-1)\n\tend\n\tbroadcast [end v]"
                    }
                ],
                "number": "",
                "title": "Race to 10 points",
                "challenge": true,
                "description": "Can you change your game, so that instead of answering as many questions as they can in 30 seconds, the player has to see how quickly they can get 10 questions correct?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Brain%20Game/brain-instructions.png",
                        "text": "You may also need a 'Back' button to take you to the main menu.",
                        "blocks": "broadcast [main menu v]"
                    }
                ],
                "number": "",
                "title": "Instruction screen",
                "challenge": true,
                "description": "Can you add an instructions screen to your game, telling your player how to play the game? You'll need an 'Instructions' button, and another stage background."
            }
        ],
        "description": "In this project you'll learn how to create a times table quiz, in which you have to get as many answers correct as you can in 30 seconds.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/42225768/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-final.png",
        "title": "Boat Race",
        "link": "http://jumpto.cc/boatrace-resources",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-bg.png",
                        "text": "Click on your stage backdrop and plan out your level. You should add:\n\t+ Wood that your boat has to avoid;\n\t+ A desert island that your boat has to get to.\n\n\tHere's how your game could look:"
                    }
                ],
                "number": "1",
                "title": "Planning your game",
                "description": ""
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-boat.png",
                        "text": "+ If your club leader has given you a 'Resources' folder, click 'Upload sprite from file' and add the 'boat.png' image. You should shrink the sprite and put it in it's starting position.\n\n\tIf you don't have the boat.png image, you can draw your own boat instead!"
                    },
                    {
                        "text": "You are going to control the boat with your mouse. Add this code to your boat:",
                        "blocks": "when flag clicked\n\t\tpoint in direction (0 v)\n\t\tgo to x: (-190) y: (-150)\n\t\tforever\n\t\t\tpoint towards [mouse-pointer v]\n\t\t\tmove (1) steps\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-mouse.png",
                        "text": "Test out your boat, by clicking the flag and moving the mouse. Does the boat sail towards the mouse?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-pointer.png",
                        "text": "What happens if the boat reaches the mouse pointer?\n\n\tTo stop this happening, you'll need to add an `if` block to your code, so that the boat only moves if it is more than 5 pixels away from the mouse."
                    },
                    {
                        "text": "Test out your boat again, to check whether the problem has been fixed."
                    }
                ],
                "number": "2",
                "title": "Controlling the boat",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ You'll need 2 costumes for your boat, one normal costume, and one for when the boat crashes. Duplicate your boat costume, and name them 'normal' and 'hit'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-hit-costume.png",
                        "text": "Click on your 'hit' costume, and choose the 'Select' tool to grab bits of the boat and move and rotate them around. Make your boat look as if it's crashed."
                    },
                    {
                        "text": "Add this code to your boat, inside the `forever` loop, so that it crashes when it touches any brown wooden bits:\n\n\tThis code is inside the `forever` loop, so that your code keeps checking if the boat has crashed.",
                        "blocks": "if <touching color [#603C15]?> then\n\t\t\tswitch costume to [hit v]\n\t\t\tsay [Noooooo!] for (1) secs\n\t\t\tswitch costume to [normal v]\n\t\t\tpoint in direction (0 v)\n\t\t\tgo to x: (-215) y: (-160)\n\t\tend"
                    },
                    {
                        "text": "You should also make sure that your boat always starts looking like it's 'normal'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-crash.png",
                        "text": "Now if you try to sail through a wooden barrier, you should see that your boat crashes and moves back to the start."
                    }
                ],
                "number": "3",
                "title": "Crashing!",
                "description": "Your boat can sail through the wooden barriers! Let's fix that."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-win.png",
                        "text": "When the boat gets to the yellow desert island, it should say 'YEAH!' and then the game should stop. You'll need to use this code:",
                        "blocks": "say [YEAH!] for (1) secs\n\tstop [all v]"
                    }
                ],
                "number": "",
                "title": "Winning!",
                "challenge": true,
                "description": "Can you add another `if` {.blockcontrol} statement to your boat's code, so that the player wins when they get to the desert island?"
            },
            {
                "number": "",
                "title": "Sound effects",
                "challenge": true,
                "description": "Can you add sound effects to your game, for when the boat crashes, or reaches the island at the end. You could even add background music (see the previous 'Rock Band' project if you need help with this)."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-variable.png",
                        "text": "+ Add a new variable called `time` to your stage. You can also change the display of your new variable. If you need help, have a look at the 'Balloons' project."
                    },
                    {
                        "text": "Add this code to your __stage__, so that the timer counts up until the boat reaches the desert island:",
                        "blocks": "when flag clicked\n\t\tset [time v] to [0]\n\t\tforever\n\t\t\twait (0.1) secs\n\t\t\tchange [time v] by (0.1)\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-variable-test.png",
                        "text": "That's it! Test out your game and see how quickly you can get to the desert island!"
                    }
                ],
                "number": "4",
                "title": "Time Trial",
                "description": "Let's add a timer to your game, so that the player has to get to the desert island as fast as possible."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-boost.png",
                        "text": "+ First let's add some 'boosts' to your game, which will speed up the boat. Edit your stage backdrop and add in some white booster arrows."
                    },
                    {
                        "text": "You can now add some code to your boat's `forever` loop, so that it moves 2 _extra_ steps when touching a white booster.",
                        "blocks": "if <touching color [#FFFFFF]?> then\n\t\t\tmove (3) steps\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-gate.png",
                        "text": "You can also add in a spinning gate, which your boat has to avoid. Add in a new sprite called 'gate', which looks like this:\n\n\tMake sure that the colour of the gate is the same as the other wooden barriers."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-center.png",
                        "text": "Set the center of the gate sprite."
                    },
                    {
                        "text": "Add code to your gate, to make it spin slowly `forever` ."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-gate-test.png",
                        "text": "Test out your game. You should now have a spinning gate that you must avoid."
                    }
                ],
                "number": "5",
                "title": "Obstacles and power-ups",
                "description": "This game is _far_ too easy - let's add things to make it more interesting."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-algae.png",
                        "text": "+ You could add green slime to your backdrop, which slows the player down when they touch it. You can use a `wait` block to do this:",
                        "blocks": "wait (0.01) secs"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-obstacles.png",
                        "text": "You could add a moving object, like a log or a shark!\n\nThese blocks may help you:\n\nIf your new object isn't brown, you'll need to add to your boat code:",
                        "blocks": "move (1) steps\n\tif on edge, bounce"
                    }
                ],
                "number": "",
                "title": "More obstacles!",
                "challenge": true,
                "description": "Can you add more obstacles to your game? Here are some ideas:"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%201/Boat%20Race/boat-p2.png",
                        "text": "+ Duplicate the boat, rename it 'Player 2' and change its colour."
                    },
                    {
                        "text": "Change Player 2's starting position, by changing this code:\n\n```blocks\n\tgo to x"
                    }
                ],
                "number": "",
                "title": "More boats!",
                "challenge": true,
                "description": "Can you turn your game into a race between 2 players?"
            },
            {
                "components": [
                    {
                        "text": "",
                        "blocks": "when [space v] key pressed\n\tnext backdrop"
                    }
                ],
                "number": "",
                "title": "More levels!",
                "challenge": true,
                "description": "Can you create additional backdrops, and allow the player to choose between levels?"
            }
        ],
        "description": "You are going to learn how to make a game, in which you'll use the mouse to navigate a boat to a desert island.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/63957956/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-final.png",
        "title": "Dodgeball",
        "link": "http://jumpto.cc/dodge-resources",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-resources.png",
                        "text": "For this project, you should have a 'Project Resources' folder, containing the background image you'll need. Make sure that you can find this folder, and ask your club leader if you can't find it."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-background.png",
                        "text": "Add the image 'background.png' as a new stage backdrop, or draw your own! If you're drawing your own level, just make sure that the poles and the floors are different colours, and that there's a door (or something similar) that your player has to reach. Here's how your project should look:"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-characters.png",
                        "text": "Add a new sprite, which will be your character. It's better if you choose a sprite with multiple costumes, so that you can make it look as though it's walking."
                    },
                    {
                        "text": "Let's use the arrow keys to move your character around. When the player presses the right arrow, you want your character to point right, move a few steps and change to the next costume:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [right arrow v] pressed? > then\n\t\t\t\tpoint in direction (90 v)\n\t\t\t\tmove (3) steps\n\t\t\t\tnext costume\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-walking.png",
                        "text": "Test out your character by clicking the flag and then holding down the right arrow key. Does your player move to the right? Does your character look like they are walking?"
                    },
                    {
                        "text": "To move your character to the left, you'll need to add another `if` loop, which moves your character to the left. Remember to test your new code, to make sure that it works!"
                    },
                    {
                        "text": "To climb a pole, your character should move up slightly whenever the up arrow is pressed and they're touching the correct colour. Add this code inside your character's `forever` loop:",
                        "blocks": "if < <key [up arrow v] pressed?> and <touching color [#FFFF00]?> > then\n\t\t\tchange y by (4)\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-test-character.png",
                        "text": "Test your character - can you climb the yellow poles and get to the end of your level?"
                    }
                ],
                "number": "1",
                "title": "Character movement",
                "description": "Let's start by creating a character that can move left and right, as well as climb up poles."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-win.png",
                        "text": ""
                    }
                ],
                "number": "",
                "title": "Completing the level",
                "challenge": true,
                "description": "Can you add more code to your character, so that they say something `if` {.blockcontrol} they get to the brown door?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-no-gravity.png",
                        "text": "+ You may have noticed that your character can walk off a platform into mid-air. Try to walk off of a platform and see what happens."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-gravity.png",
                        "text": "To fix this, let's add gravity to your game. Create a new variable called `gravity` . You can hide this variable from your stage if you want to."
                    },
                    {
                        "text": "Add this new code block, which sets the gravity to a negative number, and then uses this to repeatedly change your character's y-coordinate.",
                        "blocks": "when flag clicked\n\t\tset [gravity v] to [-4]\n\t\tforever\n\t\t\tchange y by (gravity)\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-gravity-drag.png",
                        "text": "Click the flag, and then drag your character to the top of the stage. What happens? Does the gravity work as you expected?"
                    },
                    {
                        "text": "Gravity shouldn't move your character through a platform or a pole! Add an `if` block to your code, so that the gravity only works when your character is in mid-air. The gravity code should now look like this:",
                        "blocks": "when flag clicked\n\t\tset [gravity v] to [-4]\n\t\tforever\n\t\t\tif < not < <touching color [#0000FF]?> or <touching color [#FFFF00]?> > > then\n\t\t\t\tchange y by (gravity)\n\t\t\tend\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-gravity-test.png",
                        "text": "Test the gravity again. Does your character stop when they are on a platform or a pole? Can you walk off the edge of platforms to the level below?"
                    },
                    {
                        "text": "Let's also make your character jump when the player presses the space bar. One very easy way to do this is to move your character up a few times, using this code:\n\n\tAs gravity is constantly pushing your character down by 4 pixels, you need to choose a number greated than 4 in your `change y by (4)` block. Change this number until you're happy with the height your character jumps.",
                        "blocks": "when [space v] key pressed\n\t\trepeat (10)\n\t\t\tchange y by (4)\n\t\tend"
                    },
                    {
                        "text": "If you test out this code, you'll notice that it works, but the movement isn't very smooth. To make jumping look smoother, you'll need to move your character by smaller and smaller amounts, until they're not jumping anymore."
                    },
                    {
                        "text": "To do this, create another variable called `jump height` . Again, you can hide this variable if you prefer."
                    },
                    {
                        "text": "Delete the jumping code you added to your character, and replace it with this code:\n\n\tThis code moves your character up by 8 pixels, then 7.5 pixels, then 7 pixels, and so on, until your character has finished jumping. This makes jumping look much smoother.",
                        "blocks": "when [space v] key pressed\n\t\tset [jump height v] to [8]\n\t\trepeat until < (jump height) = [0] >\n\t\t\tchange y by (jump height)\n\t\t\tchange [jump height v] by (-0.5)\n\t\tend"
                    },
                    {
                        "text": "Change the starting value of your `jump height` variable and test it until you're happy with the height your character jumps."
                    }
                ],
                "number": "2",
                "title": "Gravity and jumping",
                "description": "Let's make your character move more realistically, by adding gravity and allowing them to jump."
            },
            {
                "number": "",
                "title": "Improved jumping",
                "challenge": true,
                "description": "Your character is able to jump whenever the spacebar is pressed, even if they're already in mid-air. You can test this by just holding down the spacebar. Can you fix this, so that your character can only jump `if` {.blockcontrol} they're touching a blue platform?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-balls.png",
                        "text": "+ Create a new ball sprite. You can choose any type of ball you like."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-ball-resize.png",
                        "text": "Resize your ball, so that your character can jump over it. Try jumping over the ball to test it."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-ball-motion.png",
                        "text": "Add this code to your ball:\n\n\tThis code creates a new ball clone every 3 seconds. Each new clone moves along the top platform."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-ball-test.png",
                        "text": "Click the flag to test this out."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-ball-more-motion.png",
                        "text": "Add more code to your ball sprite, so that they move across all 3 platforms."
                    },
                    {
                        "text": "Finally, you'll need code for when your character gets hit by a ball! Add this code to your ball sprite:",
                        "blocks": "when I start as a clone\n\t\tforever\n\t\t\tif < touching [Pico walking v]? > then\n\t\t\t\tbroadcast [hit v]\n\t\t\tend\n\t\tend"
                    },
                    {
                        "text": "You'll also need to add code to your character, to move back to the start when they're hit:",
                        "blocks": "when I receive [hit v]\n\t\tpoint in direction (90 v)\n\t\tgo to x: (-210) y: (-120)"
                    },
                    {
                        "text": "Test out your character and see if they go back to the start when they've been hit by a ball."
                    }
                ],
                "number": "3",
                "title": "Dodging balls",
                "description": "Now that you've got your character moving around, let's add some balls for your character to avoid."
            },
            {
                "components": [
                    {
                        "text": "+ don't all look the same?"
                    },
                    {
                        "text": "appear after a random amount of time?"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-ball-random.png",
                        "text": "are a random size?"
                    }
                ],
                "number": "",
                "title": "Random balls",
                "challenge": true,
                "description": "The balls your character has to dodge all look the same, and always appear every 3 seconds. Can you improve them, so that they:"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-lasers-costume.png",
                        "text": "+ Add a new sprite to your game, called 'Laser'. It should have 2 costumes, called 'on' and 'off'."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-lasers-position.png",
                        "text": "Place your new laser anywhere you like, between 2 platforms."
                    },
                    {
                        "text": "Add code to your laser, to make it switch between the 2 costumes.\n\n\tIf you prefer, you can `wait` amount of time between costume changes.",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tswitch costume to [on v]\n\t\t\twait (2) secs\n\t\t\tswitch costume to [off v]\n\t\t\twait (2) secs\n\t\tend"
                    },
                    {
                        "text": "Finally, add code to your laser, so that the 'hit' message is broadcast when the laser touches your character. This code will be the same as the code you added to your ball sprite.\n\n\tYou don't need to add any more code to your character - they already know what to do when they get hit!"
                    },
                    {
                        "text": "Test out your game to see if you can get past the laser. Change the `wait` times in your code if the lasers are too easy or too hard."
                    }
                ],
                "number": "4",
                "title": "Lasers!",
                "description": "Let's make your game a little harder to complete, by adding lasers!"
            },
            {
                "components": [
                    {
                        "text": "+ A flying killer butterfly;"
                    },
                    {
                        "text": "Platforms that appear and disappear;"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-obstacles.png",
                        "text": "Falling tennis balls that must be avoided.\n\nYou could even create more than one backdrop, and move to the next level when your character reaches the brown door:\n\n```blocks\n\tif <touching color [#714300]?> then\n\t\tswitch backdrop to [next backdrop v]\n\t\tgo to x"
                    }
                ],
                "number": "",
                "title": "More obstacles",
                "challenge": true,
                "description": "If you think your game is still too easy, you can add more obstacles to your level. You can add anything you like, but here are some ideas:"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Dodgeball/dodge-gravity-bug.png",
                        "text": "Can you fix this bug? To do this, you need to give your character different coloured trousers (on _all_ costumes)...\n\n...and then replace the code"
                    }
                ],
                "number": "",
                "title": "Improved gravity",
                "challenge": true,
                "description": "There's one other small bug in your game: gravity doesn't pull your character downwards if _any_ part of it is touching a blue platform - even it's head! You can test this out by climbing most of the way up a pole and then moving to the left."
            },
            {
                "components": [
                    {
                        "text": "+ Your player starts with 3 lives;"
                    },
                    {
                        "text": "Whenever your player gets hit, one life is lost and they go back to the start;"
                    },
                    {
                        "text": "If there are no lives left, the game ends."
                    }
                ],
                "number": "",
                "title": "More lives",
                "challenge": true,
                "description": "Can you give your player 3 `lives` {.blockdata}, instead of just sending them back to the beginning each time? Here's how your game could work:"
            }
        ],
        "description": "In this project you'll learn how to create a platform game, in which you have to dodge the moving balls and reach the end of the level.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/39740618/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-final.png",
        "title": "Catch the Dots",
        "link": "http://jumpto.cc/dots-resources",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-controller.png",
                        "text": "If your club leader has given you a 'Resources' folder, click 'Upload sprite from file' and add the 'controller.svg' image. You should move this sprite to the center of the stage.\n\n\tIf you don't have this image, you can draw it yourself!"
                    },
                    {
                        "text": "Turn your controller to the right when the right arrow key is pressed:",
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [right arrow v] pressed?> then\n\t\t\t\tturn right (3) degrees\n\t\t\tend\n\t\tend"
                    },
                    {
                        "text": "Test out your controller -- it should spin to the right."
                    }
                ],
                "number": "1",
                "title": "Creating a controller",
                "description": "Let's start by creating a controller, that will be used to collect dots."
            },
            {
                "number": "",
                "title": "Spinning left",
                "challenge": true,
                "description": "Can you make your controller spin to the left when the left arrow key is pressed?"
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-red.png",
                        "text": "+ Create a new sprite called 'red'. This sprite should be a small red dot."
                    },
                    {
                        "text": "Add this script to your 'red' dot sprite, to create a new dot clone every few seconds:",
                        "blocks": "when flag clicked\n\t\twait (2) secs\n\t\tforever\n\t\t\tcreate clone of [myself v]\n\t\t\twait (pick random (5) to (10)) secs\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-start.png",
                        "text": "When each clone is created, you want it to appear in one of the 4 corners of the stage.\n\n\tTo do this, first create a new list variable called `start positions` and click the `(+)` to add in the values `-180` and `180`."
                    },
                    {
                        "text": "You can use these 2 list items to pick a random corner of the stage. Add this code to the 'dot' sprite, so that each new clone moves to a random corner and then slowly moves towards the controller.\n\n\tThe code above chooses either `-180` or `180` for the x _and_ y positions, meaning that each clone starts in one corner of the stage.",
                        "blocks": "when I start as a clone\n\t\tgo to x: (item (random v) of [start positions v]) y: (item (random v) of [start positions v])\n\t\tpoint towards [controller v]\n\t\tshow\n\t\trepeat until <touching [controller v]?>\n\t\t\tmove (1) steps\n\t\tend"
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-red-test.png",
                        "text": "Test your project. You should see lots of red dots appear in each corner of the screen, and move slowly towards the controller."
                    },
                    {
                        "text": "Create 2 new variables called `lives` ."
                    },
                    {
                        "text": "Add code to your stage to set the `lives` to 0 at the start of the game."
                    },
                    {
                        "text": "You need to add code to the end of your red dot's `when I start as a clone` if the colours don't match.",
                        "blocks": "move (5) steps\n\t\tif <touching color [#FF0000]?> then\n\t\t\tchange [score v] by (1)\n\t\t\tplay sound [pop v]\n\t\telse\n\t\t\tchange [lives v] by (-1)\n\t\t\tplay sound [laser1 v]\n\t\tend\n\t\tdelete this clone"
                    },
                    {
                        "text": "Add this code to the end of your stage's script, so that the game ends when the player loses all of their lives:",
                        "blocks": "wait until <(lives) < [1]>\n\t\tstop [all v]"
                    },
                    {
                        "text": "Test your game to make sure this code works as expected."
                    }
                ],
                "number": "2",
                "title": "Collecting dots",
                "description": "Let's add some dots for the player to collect with their controller."
            },
            {
                "components": [
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-more-dots.png",
                        "text": "Edit these sprites (including their code), so that each coloured dot has to match the correct colour on the controller. Remember to test your project, making sure you gain points and lose lives at the right times, and that your game isn't too easy or too hard!"
                    }
                ],
                "number": "",
                "title": "More dots",
                "challenge": true,
                "description": "Duplicate your 'red' dot sprite twice, and name the two new sprites 'yellow' and 'blue'."
            },
            {
                "components": [
                    {
                        "text": "+ Create a new variable called `delay` ."
                    },
                    {
                        "text": "On your stage, create a new script that sets the delay to a high number, and then slowly reduces the delay time.\n\n\tNotice that this is very similar to how a game timer works!",
                        "blocks": "when flag clicked\n\t\tset [delay v] to (8)\n\t\trepeat until < (delay) = (2)>\n\t\t\twait (10) secs\n\t\t\tchange [delay v] by (-0.5)\n\t\tend"
                    },
                    {
                        "text": "Finally, you can use this `delay` variable:",
                        "blocks": "wait (delay) secs"
                    },
                    {
                        "text": "Test your new `delay` variable reducing?"
                    }
                ],
                "number": "3",
                "title": "Increasing the difficulty",
                "description": "Let's make the game get more difficult the longer the player survives, by slowly reducing the delay between dots appearing."
            },
            {
                "number": "",
                "title": "Faster moving dots",
                "challenge": true,
                "description": "Can you improve your game by adding a `speed` {.blockdata} variable, so that the dots start off moving 1 step at a time, and steadily get faster and faster? This will work in a very similar way to the `delay` {.blockdata} variable used above, and you can use this code to help you."
            },
            {
                "components": [
                    {
                        "text": "+ Create a new variable called `high score` ."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-custom-1.png",
                        "text": "Click on your stage, and create a new custom block called `check high score` ."
                    },
                    {
                        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Term%202/Catch%20the%20Dots/dots-custom-2.png",
                        "text": "Just before the end of the game, add in your new custom block."
                    },
                    {
                        "text": "Add code to your custom block to store the current `score` it's the highest score so far:",
                        "blocks": "define [check high score]\n\t\tif <(score) > (high score)> then\n\t\t\tset [high score v] to (score)\n\t\tend"
                    },
                    {
                        "text": "Test the code you've added. Play your game to check whether the `high score` is updated correctly."
                    }
                ],
                "number": "4",
                "title": "High score",
                "description": "Let's save the high score, so that players can see how well they're doing."
            },
            {
                "components": [
                    {
                        "text": "+ double your score;"
                    },
                    {
                        "text": "slow down the dots;"
                    },
                    {
                        "text": "hide all the other dots on the screen!"
                    }
                ],
                "number": "",
                "title": "Improve your game!",
                "challenge": true,
                "description": "Can you think of ways to improve your game? For example, you could create special dots that:"
            },
            {
                "number": "",
                "title": "Game menu",
                "challenge": true,
                "description": "Can you add a menu (with buttons) to your game? You could add an instructions screen, or a separate screen for showing the high score. If you need help with this, the 'Brain Game' project will help you."
            }
        ],
        "description": "In this project you'll learn how to create a game, in which you have to match up coloured dots with the correct part of the controller.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/44942820/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>"
    },
    {
        "image": "https://raw.githubusercontent.com/CodeClub/scratch-curriculum/master/en-GB/Archived%20Projects/Desert%20Race/desertrace_screenshot.png",
        "title": "Desert Race",
        "steps": [
            {
                "components": [
                    {
                        "text": "+ Select the Stage, and add the **Nature/desert** backdrop.\nticking off the boxes below:"
                    },
                    {
                        "text": "Add a new sprite, select the **Lioness** sprite that you will find in the **Animals** folder."
                    },
                    {
                        "text": "Add another sprite, select the **Parrot** sprite that you will find in the **Animals** folder. `Shrink`it so that it is roughly the same size as the lioness sprite."
                    }
                ],
                "number": "1",
                "title": "Create the scene and add the sprites",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ First select the lion sprite and set it to `move (4) steps`when you press the **\u2018L\u2019** key.",
                        "blocks": "when [l v] key pressed\n        move (4) steps"
                    },
                    {
                        "text": "Next, select the parrot sprite and set it to `move (4) steps`when you press the **\u2018A\u2019** key.",
                        "blocks": "when [a v] key pressed\n        move (4) steps"
                    }
                ],
                "tests": [
                    {
                        "text": "__Click the green flag__\nDo your lioness and parrot move across the screen when you press the \u2018A\u2019 and \u2018L\u2019 keys?"
                    }
                ],
                "number": "2",
                "title": "Make the lioness and the parrot move",
                "description": "We want the sprite to move when you press a key."
            },
            {
                "components": [
                    {
                        "text": "+ Add a new sprite from the library. Choose the **button3** sprite which is inside **\u201cThings\u201d**."
                    },
                    {
                        "text": "Edit the costume of the button sprite, add the text **\u2018start\u2019** to it and click OK. Move the sprite to the middle of the stage."
                    },
                    {
                        "text": "Now add a script that shows the sprite when the project is run:",
                        "blocks": "when FLAG clicked\n        show"
                    },
                    {
                        "text": "Now we want the button to count down from 3 and then say go and then `hide`when it is clicked. Add another script like this one:",
                        "blocks": "when this sprite clicked\n        say [3] for (1) secs\n        say [2] for (1) secs\n        say [1] for (1) secs\n        say [GO!] for (1) secs\n        hide"
                    }
                ],
                "number": "3",
                "title": "Starting the race",
                "description": "We need to have a way to start the race and to know who has won. __First we create a start button.__"
            },
            {
                "components": [
                    {
                        "text": "+ Add a block to the parrot\u2019s script that sets the **racing** variable to be 0 when the sprite touches the edge of the screen.",
                        "blocks": "when [a v] key pressed\n    if <(racing) = [1]> then\n        move (4) steps\n        if <touching [edge v]?> then\n        set (racing) to [0]"
                    },
                    {
                        "text": "Now we want the parrot to let us know if it wins the race. Record a new sound for the Parrot sprite that will be played when the parrot wins. Click `sounds`and then record the sound of the parrot winning the race!"
                    },
                    {
                        "text": "Now add blocks that `play`the sound you recorded and makes the parrot say it has won:",
                        "blocks": "when [a v] key pressed\n        if <(racing) = [1]> then\n            move (4) steps\n            if <touching [edge v]?> then\n                set (racing) to [0]\n                play sound [recording1 v]\n                say [The Parrot Wins! v] for (3) secs"
                    },
                    {
                        "text": "Now repeat these steps for the lioness."
                    }
                ],
                "number": "4",
                "title": "Finishing the race",
                "description": ""
            },
            {
                "components": [
                    {
                        "text": "+ Click on the Parrot sprite.\nAdd a block that broadcasts a **\"finished\u201d** message after the sprite says it has won.",
                        "blocks": "when [a v] key pressed\n    if <(racing) = [1]> then\n        move (4) steps\n        if <touching [edge v]?> then\n            set (racing) to [0]\n            play sound [recording1 v]\n            say [The Parrot Wins! v] for (3) secs\n            broadcast [finished v]"
                    },
                    {
                        "text": "Now we need to add a new script that listens for the finished broadcast and moves the parrot back to the start. What happens if you change the value that **x** is set to?",
                        "blocks": "when I receive [finished v]\n        set x to (-170)"
                    },
                    {
                        "text": "Now add the same script for the lioness. Test different **x** values to make sure the lion and the parrot line up at the start."
                    },
                    {
                        "text": "We also want to put the lion and the parrot in the same position when the project is run, so add another script to each that moves them to the start when we click the flag.",
                        "blocks": "when FLAG clicked\n        set x to (-170)"
                    },
                    {
                        "text": "Now click on the button sprite and add a script that shows it when it receives the finished message."
                    }
                ],
                "tests": [
                    {
                        "text": "__Click on the green flag.__\n\nCan you race against a friend, one of you moving the parrot by pressing \u2018A\u2019 and the other moving the Lion by pressing \u2018L\u2019?"
                    }
                ],
                "number": "5",
                "title": "Resetting the game",
                "description": "After the race is finished we need to tell the other sprites we have won and reset the game so we can play again.\n\n__We need the winning sprite to broadcast that it has won.__"
            }
        ],
        "description": "This game is a two player game where you race a parrot and a lioness across the desert. Each player has to press a key as fast as they can to move their animal, the first one to reach the edge of the screen wins."
    }
]