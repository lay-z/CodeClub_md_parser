[
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-final.png", 
        "steps": [
            {
                "description": "", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Click on your stage backdrop and plan out your level. You should add:\n\t+ Wood that your boat has to avoid;\n\t+ A desert island that your boat has to get to.\n\n\tHere's how your game could look:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-bg.png"
                    }
                ], 
                "title": "Planning your game"
            }, 
            {
                "description": "", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ If your club leader has given you a 'Resources' folder, click 'Upload sprite from file' and add the 'boat.png' image. You should shrink the sprite and put it in it's starting position.\n\n\t\n\n\tIf you don't have the boat.png image, you can draw your own boat instead!", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-boat.png"
                    }, 
                    {
                        "text": "You are going to control the boat with your mouse. Add this code to your boat:", 
                        "blocks": "when flag clicked\n\t\tpoint in direction (0 v)\n\t\tgo to x: (-190) y: (-150)\n\t\tforever\n\t\t\tpoint towards [mouse-pointer v]\n\t\t\tmove (1) steps\n\t\tend"
                    }, 
                    {
                        "text": "Test out your boat, by clicking the flag and moving the mouse. Does the boat sail towards the mouse?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-mouse.png"
                    }, 
                    {
                        "text": "What happens if the boat reaches the mouse pointer?\n\n\tTo stop this happening, you'll need to add an `if` {.blockcontrol} block to your code, so that the boat only moves if it is more than 5 pixels away from the mouse.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-pointer.png"
                    }, 
                    {
                        "text": "Test out your boat again, to check whether the problem has been fixed."
                    }
                ], 
                "title": "Controlling the boat"
            }, 
            {
                "description": "Your boat can sail through the wooden barriers! Let's fix that.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ You'll need 2 costumes for your boat, one normal costume, and one for when the boat crashes. Duplicate your boat costume, and name them 'normal' and 'hit'."
                    }, 
                    {
                        "text": "Click on your 'hit' costume, and choose the 'Select' tool to grab bits of the boat and move and rotate them around. Make your boat look as if it's crashed.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-hit-costume.png"
                    }, 
                    {
                        "text": "Add this code to your boat, inside the `forever` {.blockcontrol} loop, so that it crashes when it touches any brown wooden bits:\n\n\t\n\n\tThis code is inside the `forever` {.blockcontrol} loop, so that your code keeps checking if the boat has crashed.", 
                        "blocks": "if <touching color [#603C15]?> then\n\t\t\tswitch costume to [hit v]\n\t\t\tsay [Noooooo!] for (1) secs\n\t\t\tswitch costume to [normal v]\n\t\t\tpoint in direction (0 v)\n\t\t\tgo to x: (-215) y: (-160)\n\t\tend"
                    }, 
                    {
                        "text": "You should also make sure that your boat always starts looking like it's 'normal'."
                    }, 
                    {
                        "text": "Now if you try to sail through a wooden barrier, you should see that your boat crashes and moves back to the start.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-crash.png"
                    }
                ], 
                "title": "Crashing!"
            }, 
            {
                "description": "Let's add a timer to your game, so that the player has to get to the desert island as fast as possible.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add a new variable called `time` {.blockdata} to your stage. You can also change the display of your new variable. If you need help, have a look at the 'Balloons' project.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-variable.png"
                    }, 
                    {
                        "text": "Add this code to your __stage__, so that the timer counts up until the boat reaches the desert island:", 
                        "blocks": "when flag clicked\n\t\tset [time v] to [0]\n\t\tforever\n\t\t\twait (0.1) secs\n\t\t\tchange [time v] by (0.1)\n\t\tend"
                    }, 
                    {
                        "text": "That's it! Test out your game and see how quickly you can get to the desert island!", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-variable-test.png"
                    }
                ], 
                "title": "Time Trial"
            }, 
            {
                "description": "This game is _far_ too easy - let's add things to make it more interesting.", 
                "number": "5", 
                "components": [
                    {
                        "text": "+ First let's add some 'boosts' to your game, which will speed up the boat. Edit your stage backdrop and add in some white booster arrows.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-boost.png"
                    }, 
                    {
                        "text": "You can now add some code to your boat's `forever` {.blockcontrol} loop, so that it moves 2 _extra_ steps when touching a white booster.", 
                        "blocks": "if <touching color [#FFFFFF]?> then\n\t\t\tmove (3) steps\n\t\tend"
                    }, 
                    {
                        "text": "You can also add in a spinning gate, which your boat has to avoid. Add in a new sprite called 'gate', which looks like this:\n\n\t\n\n\tMake sure that the colour of the gate is the same as the other wooden barriers.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-gate.png"
                    }, 
                    {
                        "text": "Set the center of the gate sprite.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-center.png"
                    }, 
                    {
                        "text": "Add code to your gate, to make it spin slowly `forever` {.blockcontrol}."
                    }, 
                    {
                        "text": "Test out your game. You should now have a spinning gate that you must avoid.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/boat_raceboat-gate-test.png"
                    }
                ], 
                "title": "Obstacles and power-ups"
            }
        ], 
        "description": "You are going to learn how to make a game, in which you'll use the mouse to navigate a boat to a desert island.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/63957956/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Boat Race"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-final.png", 
        "steps": [
            {
                "description": "Let's start by creating random questions for the player to answer.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Choose a character and a backdrop for your game. You can choose any you like! Here's an example:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-setting.png"
                    }, 
                    {
                        "text": "Create 2 new variables called `number 1` {.blockdata} and `number 2` {.blockdata}. These variables will store the 2 numbers that will be multiplied together.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-variables.png"
                    }, 
                    {
                        "text": "Add code to your character, to set both of these variables to a `random` {.blockoperators} number between 2 and 12.", 
                        "blocks": "when flag clicked\n\t\tset [number 1 v] to (pick random (2) to (12))\n\t\tset [number 2 v] to (pick random (2) to (12))"
                    }, 
                    {
                        "text": "You can then ask the player for the answer, and let them know if they were right or wrong.", 
                        "blocks": "when flag clicked\n\t\tset [number 1 v] to (pick random (2) to (12))\n\t\tset [number 2 v] to (pick random (2) to (12))\n\t\task (join (number 1)(join [ x ] (number 2))) and wait\n\t\tif <(answer) = ((number 1)*(number 2))> then\n\t\t\tsay [yes! :)] for (2) secs\n\t\telse\n\t\t\tsay [nope :(] for (2) secs\n\t\tend"
                    }, 
                    {
                        "text": "Test your project fully, by answering one question correctly and one with the wrong answer."
                    }, 
                    {
                        "text": "Add a `forever` {.blockcontrol} loop around this code, so that the player is asked lots of questions."
                    }, 
                    {
                        "text": "Create a countdown timer on the stage, using a variable called `time` {.blockdata}. The 'Balloons' project has instructions for making a timer (in step 6) if you need help!"
                    }, 
                    {
                        "text": "Test your project again - you should be able to continue asking questions until the time runs out."
                    }
                ], 
                "title": "Creating questions"
            }, 
            {
                "description": "Let's add a 'play' button to your game, so that you can play lots of times.", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Create a new 'Play' button sprite, which your player will click to start a new game. You can draw it yourself, or edit a sprite from the Scratch library.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-play.png"
                    }, 
                    {
                        "text": "Add this code to your new button.\n\n\t\n\n\tThis code shows the play button when your project is started. When the button is clicked, it is hidden and then broadcasts a message that will start the game.", 
                        "blocks": "when flag clicked\n\t\tshow\n\n\t\twhen this sprite clicked\n\t\thide\n\t\tbroadcast [start v]"
                    }, 
                    {
                        "text": "You'll need to edit your character's code, so that the game starts when they receive the `start` {.blockevents} message, and not when the flag is clicked.\n\n\tReplace the `when flag clicked` {.blockevents} code with `when I receive start` {.blockevents}.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-start.png"
                    }, 
                    {
                        "text": "Click the green flag and then click your new play button to test it. You should see that the game doesn't start until the button is clicked."
                    }, 
                    {
                        "text": "Did you notice that the timer starts when the green flag is clicked, and not when the game starts? \n\n\t\n\n\tCan you fix this problem?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-timer-bug.png"
                    }, 
                    {
                        "text": "Click on the stage, and replace the `stop all` {.blockcontrol} block with an `end` {.blockevents} message.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-end.png"
                    }, 
                    {
                        "text": "You can now add code to your button, to show it again at the end of each game.", 
                        "blocks": "when I receive [end v]\n\t\tshow"
                    }, 
                    {
                        "text": "You'll also need to stop your character asking questions at the end of each game:", 
                        "blocks": "when I receive [end v]\n\t\tstop [other scripts in sprite v]"
                    }, 
                    {
                        "text": "Test your play button by playing a couple of games. You should notice that the play button shows after each game. To make testing easier, you can shorten each game, so that it only lasts a few seconds.", 
                        "blocks": "set [time v] to [10]"
                    }, 
                    {
                        "text": "You can even change how the button looks when the mouse hovers over it.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/brain_gamebrain-fisheye.png", 
                        "blocks": "when flag clicked\n\t\tshow\n\t\tforever\n\t\tif <touching [mouse-pointer v]?> then\n\t\t\tset [fisheye v] effect to (30)\n\t\telse\n\t\t\tset [fisheye v] effect to (0)\n\t\tend\n\t\tend"
                    }
                ], 
                "title": "Multiple games"
            }, 
            {
                "description": "Instead of your character just saying `yes! :)` or `nope :(` to the player, let's add some graphics that will let the player know how they are doing.\n\n+ Create a new sprite called 'Result', containing both a 'tick' and a 'cross' costume.\n\n\t![screenshot](brain-result.png)\n\n+ Change your character's code, so that instead of telling the player how they did, it broadcasts `correct` {.blockevents} and `wrong` {.blockevents} messages instead.\n\n\t![screenshot](brain-broadcast-answer.png)\n\n+ You can now use these messages to show the 'tick' or 'cross' costume. Add this code to your new 'Result' sprite:\n\n\t![screenshot](brain-show-answer.png)\t\n\n+ Test out your game again. You should see a tick whenever you get a question correct, and a cross whenever you get one wrong!\n\n\t![screenshot](brain-test-answer.png)\n\n+ Have you noticed that the code for `when I receive correct` {.blockevents} and `when I receive wrong` {.blockevents} is nearly identical? Let's create a function to make it easier for you to make changes to your code.\n\n\tOn your 'Result' sprite, click `More Blocks` {.blockmoreblocks}, and then 'Make a Block'. Create a new function called `animate` {.blockmoreblocks}.\n\n\t![screenshot](brain-animate-function.png)\n\n+ You can then add the animation code into your new animation function, and then just use the function twice:\n\n\t![screenshot](brain-use-function.png)\n\n+ Now, if you want to show the tick and the cross for a longer or shorter time, you only need to make one change to your code. Try it!\n\n+ Instead of just showing and hiding the tick and the cross, you could change your animation function, so that the graphics fade in.\n\n\t```blocks\n\t\tdefine [animate]\n\t\tset [ghost v] effect to (100)\t\t\n\t\tshow\n\t\trepeat (25)\n\t\t\tchange [ghost v] effect by (-4)\n\t\tend\n\t\thide\n\t```", 
                "number": "3", 
                "title": "Adding graphics"
            }
        ], 
        "description": "In this project you'll learn how to create a times table quiz, in which you have to get as many answers correct as you can in 30 seconds.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/42225768/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Brain Game"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-final.png", 
        "steps": [
            {
                "description": "Let's start by creating a controller, that will be used to collect dots.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "If your club leader has given you a 'Resources' folder, click 'Upload sprite from file' and add the 'controller.svg' image. You should move this sprite to the center of the stage.\n\n\t\n\t\n\tIf you don't have this image, you can draw it yourself!", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-controller.png"
                    }, 
                    {
                        "text": "Turn your controller to the right when the right arrow key is pressed:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [right arrow v] pressed?> then\n\t\t\t\tturn right (3) degrees\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Test out your controller -- it should spin to the right."
                    }
                ], 
                "title": "Creating a controller"
            }, 
            {
                "description": "Let's add some dots for the player to collect with their controller.", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Create a new sprite called 'red'. This sprite should be a small red dot.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-red.png"
                    }, 
                    {
                        "text": "Add this script to your 'red' dot sprite, to create a new dot clone every few seconds:", 
                        "blocks": "when flag clicked\n\t\twait (2) secs\n\t\tforever\n\t\t\tcreate clone of [myself v]\n\t\t\twait (pick random (5) to (10)) secs\n\t\tend"
                    }, 
                    {
                        "text": "When each clone is created, you want it to appear in one of the 4 corners of the stage.\n\n\t\n\n\tTo do this, first create a new list variable called `start positions` {.blockdata} and click the `(+)` to add in the values `-180` and `180`.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-start.png"
                    }, 
                    {
                        "text": "You can use these 2 list items to pick a random corner of the stage. Add this code to the 'dot' sprite, so that each new clone moves to a random corner and then slowly moves towards the controller.\n\n\t\n\n\tThe code above chooses either `-180` or `180` for the x _and_ y positions, meaning that each clone starts in one corner of the stage.", 
                        "blocks": "when I start as a clone\n\t\tgo to x: (item (random v) of [start positions v]) y: (item (random v) of [start positions v])\n\t\tpoint towards [controller v]\n\t\tshow\n\t\trepeat until <touching [controller v]?>\n\t\t\tmove (1) steps\n\t\tend"
                    }, 
                    {
                        "text": "Test your project. You should see lots of red dots appear in each corner of the screen, and move slowly towards the controller.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-red-test.png"
                    }, 
                    {
                        "text": "Create 2 new variables called `lives` {.blockdata} and `score` {.blockdata}."
                    }, 
                    {
                        "text": "Add code to your stage to set the `lives` {.blockdata} to 3 and the `score` {.blockdata} to 0 at the start of the game."
                    }, 
                    {
                        "text": "You need to add code to the end of your red dot's `when I start as a clone` {.blockcontrol} code, so that either 1 is added to the player's `score` {.blockdata} if the colours match, or 1 is taken from the player's `lives` {.blockdata} if the colours don't match.", 
                        "blocks": "move (5) steps\n\t\tif <touching color [#FF0000]?> then\n\t\t\tchange [score v] by (1)\n\t\t\tplay sound [pop v]\n\t\telse\n\t\t\tchange [lives v] by (-1)\n\t\t\tplay sound [laser1 v]\n\t\tend\n\t\tdelete this clone"
                    }, 
                    {
                        "text": "Add this code to the end of your stage's script, so that the game ends when the player loses all of their lives:", 
                        "blocks": "wait until <(lives) < [1]>\n\t\tstop [all v]"
                    }, 
                    {
                        "text": "Test your game to make sure this code works as expected."
                    }
                ], 
                "title": "Collecting dots"
            }, 
            {
                "description": "Let's make the game get more difficult the longer the player survives, by slowly reducing the delay between dots appearing.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Create a new variable called `delay` {.blockdata}."
                    }, 
                    {
                        "text": "On your stage, create a new script that sets the delay to a high number, and then slowly reduces the delay time.\n\n\t\n\n\tNotice that this is very similar to how a game timer works!", 
                        "blocks": "when flag clicked\n\t\tset [delay v] to (8)\n\t\trepeat until < (delay) = (2)>\n\t\t\twait (10) secs\n\t\t\tchange [delay v] by (-0.5)\n\t\tend"
                    }, 
                    {
                        "text": "Finally, you can use this `delay` {.blockdata} variable in your red, yellow and blue dots' scripts. Remove the code that waits a random number of seconds between creating clones, and replace it with your new `delay` {.blockdata} variable:", 
                        "blocks": "wait (delay) secs"
                    }, 
                    {
                        "text": "Test your new `delay` {.blockdata} variable, and see whether the delay between dots reduces slowly. Does this work for all 3 coloured dots? Can you see the value of the `delay` {.blockdata} variable reducing?"
                    }
                ], 
                "title": "Increasing the difficulty"
            }, 
            {
                "description": "Let's save the high score, so that players can see how well they're doing.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Create a new variable called `high score` {.blockdata}."
                    }, 
                    {
                        "text": "Click on your stage, and create a new custom block called `check high score` {.blockmoreblocks}.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-custom-1.png"
                    }, 
                    {
                        "text": "Just before the end of the game, add in your new custom block.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/catch_the_dotsdots-custom-2.png"
                    }, 
                    {
                        "text": "Add code to your custom block to store the current `score` {.blockdata} as the `high score` {.blockdata} `if` {.blockcontrol} it's the highest score so far:", 
                        "blocks": "define [check high score]\n\t\tif <(score) > (high score)> then\n\t\t\tset [high score v] to (score)\n\t\tend"
                    }, 
                    {
                        "text": "Test the code you've added. Play your game to check whether the `high score` {.blockdata} is updated correctly."
                    }
                ], 
                "title": "High score"
            }
        ], 
        "description": "In this project you'll learn how to create a game, in which you have to match up coloured dots with the correct part of the controller.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/44942820/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Catch the Dots"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-final.png", 
        "steps": [
            {
                "description": "", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Before you start making your chatbot, you need to decide on their personality.\n\t+ What is their name?\n\t+ Where do they live?\n\t+ Are they happy? serious? funny? shy? friendly?"
                    }, 
                    {
                        "text": "Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Choose one of these character sprites, and add them to your project:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-characters.png"
                    }, 
                    {
                        "text": "Choose a backdrop that fits your chatbot's personality. Here's an example, although yours doesn't have to look like this:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-sprite.png"
                    }
                ], 
                "title": "Your chatbot"
            }, 
            {
                "description": "Now that you have a chatbot with a personality, let's program it to talk to you.", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Click on your chatbot character, and add this code:", 
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tsay [What a lovely name!] for (2) secs"
                    }, 
                    {
                        "text": "Click your chatbot to test it out. After you are asked your name, type it into the box along the bottom of the stage.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-text.png"
                    }, 
                    {
                        "text": "Your chatbot simply replies `What a lovely name!` every time. You can personalise your chatbot's reply, by making use of the user's answer. Change the chatbot's code, so that it looks like this:\n\n\t\n\n\tTo create the last block, you'll need to first drag on a green `join` {.blockoperators} block, and drag it on to the `say` {.blocklooks} block.\n\n\t\n\n\tYou can then change the text `hello` to say `Hi`, and drag the light blue `answer` {.blocksensing} block (from the 'Sensing' section) onto the text `world`.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-join.png", 
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tsay <join [Hi] (answer)> for (2) secs"
                    }, 
                    {
                        "text": "Test out this new program. Does it work as you expected? Can you fix any problems that you can see? (Hint: you can try adding in a space somewhere!)"
                    }, 
                    {
                        "text": "It may be that you want to store the user's name in a variable, so that you can use it again later. Create a new variable called `name` {.blockdata}. If you've forgotten how to do this, the 'Balloons' project will help you."
                    }, 
                    {
                        "text": "The information that you entered is already stored in a special variable called `answer` {.blocksensing}. Go to the Sensing group of blocks and click the answer block so that a tick appears. The current value in `answer` {.blocksensing} should then be shown on the top-left of the stage."
                    }, 
                    {
                        "text": "Once you've created your new variable, make sure that your chatbot's code looks like this:", 
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tset [name v] to (answer)\n\t\tsay <join [Hi ] (name)> for (2) secs"
                    }, 
                    {
                        "text": "If you test your program again, you'll notice that the answer is stored in the `name` {.blockdata} variable, and is shown in the top-left of the stage. The `name` {.blockdata} variable should now contain the same value as the `answer` {.blocksensing} variable.\n\n\t\n\n\tIf you'd rather not see the variables on your stage, you can click the tick next to the variable names in the 'Scripts' tab to hide them.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-variable.png"
                    }
                ], 
                "title": "A talking chatbot"
            }, 
            {
                "description": "You can program your chatbot to decide what to do, based on the user's responses.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Let's get your chatbot to ask the user a question which has a `yes` or `no` answer. Here's an example, but you can change the question if you like:\n\n\t\n\n\tNotice that now you've stored the user's name in a variable, you can use it as much as you like.", 
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tset [name v] to (answer)\n\t\tsay <join [Hi ] (name)> for (2) secs\n\t\task <join [Are you OK ] (name)> and wait\n\t\tif ((answer)=[yes]) then\n\t\t\tsay [That's great to hear!] for (2) secs\n\t\tend"
                    }, 
                    {
                        "text": "To test this program properly, you'll need to test it twice - once typing `no` as your answer, and once typing `yes`. You should only get a response from your chatbot `if` {.blockcontrol} you answer `yes`."
                    }, 
                    {
                        "text": "The trouble with your chatbot is that it doesn't give a reply if the user answers `no`. You can fix this, by changing the `if` {.blockcontrol} block to an `if/else` {.blockcontrol} block, so that your code now looks like this:", 
                        "blocks": "when this sprite clicked\n\t\task [Hey! What's your name?] and wait\n\t\tset [name v] to (answer)\n\t\tsay <join [Hi ] (name)> for (2) secs\n\t\task <join [Are you OK ] (name)> and wait\n\t\tif ((answer)=[yes]) then\n\t\t\tsay [That's great to hear!] for (2) secs\n\t\telse\n\t\t\tsay [Oh no!] for (2) secs\n\t\tend"
                    }, 
                    {
                        "text": "If you test your code, you'll now see that you get a response when you answer `yes` or `no`. Your chatbot should reply with `That's great to hear!` when you answer `yes`, but will reply with `Oh no!` if you type anything other than `yes` (`else` {.blockcontrol} means 'otherwise').", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-else.png"
                    }, 
                    {
                        "text": "You can put any code inside an `if` {.blockcontrol} or `else` {.blockcontrol} block, not just code to make your chatbot speak. For example, you can change the chatbot's costume to match the response.\n\n\tIf you have a look at your chatbot's costumes, you may see that there is more than one. (If not, you can always add more yourself!)\n\n\t\n\n\tYou can use these costumes as part of your chatbot's response, by adding this code:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-costumes.png"
                    }, 
                    {
                        "text": "Test out your program, and you should see your chatbot's face change depending on the answer you give.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-face.png"
                    }
                ], 
                "title": "Making decisions"
            }, 
            {
                "description": "You can also program your chatbot to change its location.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add another backdrop to your stage, for example the 'moon' backdrop.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-moon.png"
                    }, 
                    {
                        "text": "You can now program your chatbot to change location, by adding this code to your chatbot:", 
                        "blocks": "ask [I'm going to the moon. Do you want to come with me?] and wait\n\t\tif ((answer) = [yes]) then\n\t\t\tswitch backdrop to [moon v]\n\t\tend"
                    }, 
                    {
                        "text": "You also need to make sure that your chatbot is outside when you start talking to it. Add this block to the top of your chatbot code:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-outside.png"
                    }, 
                    {
                        "text": "Test your program, and answer `yes` when asked if you want to go to the moon. You should see that the chatbot's location has changed.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-backdrop.png"
                    }, 
                    {
                        "text": "Does your chatbot change location if you type `no`? What about if you type `I'm not sure`?"
                    }, 
                    {
                        "text": "You can also add this code inside your `if` {.blockcontrol} block, to make your chatbot jump up and down 4 times if the answer is `yes`:\n\n\t```scratch\n\trepeat (4)\n\t\tchange y by (10)\n\t\twait (0.1) secs\n\t\tchange y by (-10)\n\t\twait (0.1) secs\n\tend\n\t```", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/chatbotchatbot-loop.png"
                    }, 
                    {
                        "text": "Test your code again. Does your chatbot jump up and down if you answer `yes`?"
                    }
                ], 
                "title": "Changing location"
            }
        ], 
        "description": "You are going to learn how to program your own talking robot!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26762091/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "ChatBot"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-final.png", 
        "steps": [
            {
                "description": "Let's make a spaceship that will defend the Earth!", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Add the 'stars' backdrop and the 'Spaceship' sprite to your project. Shrink the spaceship and move it near the bottom of the screen.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-sprites.png"
                    }, 
                    {
                        "text": "Add code to move your spaceship to the left when the left arrow key is pressed. You'll need to use these blocks:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [left arrow v] pressed?> then\n\t\t\t\tchange x by (-4)\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Add code to move your spaceship to the right when the right arrow key is pressed."
                    }, 
                    {
                        "text": "Test your project to see whether you can control your spaceship with the arrow keys."
                    }
                ], 
                "title": "Making a Spaceship"
            }, 
            {
                "description": "Let's give the spaceship the ability to fire lightning bolts!", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Add the 'Lightning' sprite from the Scratch library. Click the sprite's costume and turn the lightning upside-down.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-lightning.png"
                    }, 
                    {
                        "text": "When the game is started, the lightning should be hidden until the spaceship fires its laser cannons.", 
                        "blocks": "when flag clicked\n\t\thide"
                    }, 
                    {
                        "text": "Add the following code **to the Spaceship** to create a new lightning bolt whenever the space key is pressed.", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [space v] pressed?> then\n\t\t\t\tcreate clone of [Lightning v]\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Whenever a new clone is created, it should start in the same place as the spaceship, and then move up the stage until it touches the edge. Add the following code **to the Lightning sprite**:\n\n\t\n\nNote: We move the new clone to the spaceship while it is still hidden, before then showing it. This just looks nicer.", 
                        "blocks": "when I start as a clone\n\t\tgo to [Spaceship v]\n\t\tshow\n\t\trepeat until <touching [edge v] ?>\n\t\t\tchange y by (10)\n\t\tend\n\t\tdelete this clone"
                    }, 
                    {
                        "text": "Test your lightning, by pressing the space key."
                    }
                ], 
                "title": "Lightning bolts"
            }, 
            {
                "description": "Let's add lots of flying hippos that are trying to destroy your spaceship.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Create a new sprite from the 'Hippo1' image in the Scratch library.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-hippo.png"
                    }, 
                    {
                        "text": "Set its rotation style to be left-right only, and add the following code to hide the sprite when the game starts:", 
                        "blocks": "when flag clicked\n\t\thide"
                    }, 
                    {
                        "text": "Create a new variable called `speed` {.blockdata}, that is for the hippo sprite only.\n\n\t\n\n\tYou'll know if you've done this correctly because the variable will have the name of the sprite next to it, like this:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-var.png"
                    }, 
                    {
                        "text": "The following code will create a new hippo every few seconds. **The Stage** is a good place for this code to live:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\twait (pick random (2) to (4)) secs\n\t\t\tcreate clone of [Hippo1 v]\n\t\tend"
                    }, 
                    {
                        "text": "When each hippo clone starts, make it move around the stage (at a random speed) until it gets hit by the lightning. Add this code **to the hippo** sprite:", 
                        "blocks": "when I start as a clone\n\t\tset [speed v] to (pick random (2) to (4))\n\t\tgo to x: (pick random (-220) to (220)) y: (150)\n\t\tshow\n\t\trepeat until <touching [lightning v] ?>\n\t\t\tmove (speed) steps\n\t\t\tturn right (pick random (-10) to (10)) degrees\n\t\t\tif on edge, bounce\n\t\tend\n\t\tdelete this clone"
                    }, 
                    {
                        "text": "Test out your hippo code. You should see a new hippo clone appear every few seconds, each moving at its own speed.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-hippo-test.png"
                    }, 
                    {
                        "text": "Test your laser cannon. If you hit a hippo, does it vanish?"
                    }, 
                    {
                        "text": "When a hippo touches your spaceship, we need to make the spaceship explode! To do this, first make sure that your spaceship has 2 costumes called 'normal' and 'hit'.\n\n\t\n\n\tThe spaceship's 'hit' costume can be made by importing the 'Sun' image from the Scratch library, and using the 'Color a shape' tool to change its colour.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-spaceship-costumes.png"
                    }, 
                    {
                        "text": "Add this code to your spaceship so that it switches costume whenever it collides with a flying hippo:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tswitch costume to [normal v]\n\t\t\twait until <touching [Hippo1 v]>?\n\t\t\tswitch costume to [hit v]\n\t\t\tbroadcast [hit v]\n\t\t\twait (1) secs\n\t\tend"
                    }, 
                    {
                        "text": "Did you notice that you have broadcast a 'hit' message in the code above? You can use this message to make all of the hippos disappear when the spaceship is hit.\n\n\tAdd this code to your hippo:", 
                        "blocks": "when I receive [hit v]\n\t\tdelete this clone"
                    }, 
                    {
                        "text": "Test out this code by starting a new game and colliding with a hippo.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-hippo-collide.png"
                    }
                ], 
                "title": "Flying Space-hippos"
            }, 
            {
                "description": "Let's make a fruit bat that throws oranges at your spaceship.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Firstly, make a new bat sprite that will `move` {.blockmotion} across the top of the stage `forever` {.blockcontrol}. Remember to test out your code.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-bat.png"
                    }, 
                    {
                        "text": "If you look at the bat's costumes, you'll see that it already has 2:\n\n\t\n\n\tUse the `next costume` {.blocklooks} block to make the bat flap its wings as it moves.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-bat-costume.png"
                    }, 
                    {
                        "text": "Create a new 'Orange' sprite from the Scratch library", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-orange.png"
                    }, 
                    {
                        "text": "Add code to your bat, so that it creates a new orange clone every few seconds.", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\twait (pick random (5) to (10)) secs\n\t\t\tcreate clone of [Orange v]\n\t\tend"
                    }, 
                    {
                        "text": "Click on your orange sprite and add this code to make each orange clone drop down the stage from the bat towards the spaceship:", 
                        "blocks": "when flag clicked\n\t\thide\n\n\t\twhen I start as a clone\n\t\tgo to [Bat1 v]\n\t\tshow\n\t\trepeat until <touching [edge v]?\n\t\t\tchange y by (-4)\n\t\tend\n\t\tdelete this clone\n\n\t\twhen I receive [hit v]\n\t\tdelete this clone"
                    }, 
                    {
                        "text": "In your spaceship sprite, you'll need to modify your code so that you are hit if you touch a hippo or an orange:", 
                        "blocks": "wait until < <touching [Hippo1 v]?> or <touching [Orange v]?>>"
                    }, 
                    {
                        "text": "Test your game. What happens if you get hit by a falling orange?"
                    }
                ], 
                "title": "Fruit Bats!"
            }, 
            {
                "description": "Let's add a 'game over' message at the end of the game.", 
                "number": "5", 
                "components": [
                    {
                        "text": "+ If you haven't already, create a new variable called `lives` {.blockdata}. Your spaceship should start with 3 lives and lose a life whenever it collides with an enemy. Your game should also stop when you run out of lives. If you need help, you can use the 'Catch the Dots' project to help you."
                    }, 
                    {
                        "text": "Draw a new sprite called 'Game Over', using the text tool.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/clone_warsinvaders-game-over.png"
                    }, 
                    {
                        "text": "On your stage, broadcast a `game over` {.blockevents} message just before the game ends.", 
                        "blocks": "broadcast [game over v] and wait"
                    }, 
                    {
                        "text": "Add this code to your 'Game Over' sprite, so that the message shows at the end of the game:\n\n\t\n\n\tBecause you've used a `broadcast [game over] and wait` {.blockevents} block on your stage, it will wait for the 'Game Over' sprite to be displayed before ending the game.", 
                        "blocks": "when flag clicked\n\t\thide\n\n\t\twhen I receive [game over v]\n\t\tshow"
                    }, 
                    {
                        "text": "Test your game. How many points can you score? Can you think of ways to improve your game if it is too easy or too hard?"
                    }
                ], 
                "title": "Game over"
            }
        ], 
        "description": "In this project you'll learn how to create a game in which you have to save the Earth from space monsters.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/46018140/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Clone Wars"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-final.png", 
        "steps": [
            {
                "description": "Let's start by creating a player that can move around your world.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "For this project, you should have a 'Project Resources' folder, containing all of the images you'll need. Make sure that you can find this folder, and ask your club leader if you can't find it.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-resources.png"
                    }, 
                    {
                        "text": "Add the image 'room1.png' as a new stage backdrop, and the image 'player.png' as a new sprite. If you don't have these images you can draw them yourself! Here's how your project should look:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-player.png"
                    }, 
                    {
                        "text": "Let's use the arrow keys to move the player around. When the player presses the up arrow, you want the player to move up, by changing its y coordinate. Add this code to the player sprite:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [up arrow v] pressed? > then\n\t\t\t\tchange y by (2)\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Test out your player by clicking the flag and then holding down the up arrow. Does your player move up?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-up.png"
                    }, 
                    {
                        "text": "To move the player to the left, you need to add another `if` {.blockcontrol} block to your player, which changes the x coordinate:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [up arrow v] pressed? > then\n\t\t\t\tchange y by (2)\n\t\t\tend\n\t\t\tif <key [left arrow v] pressed? > then\n\t\t\t\tchange x by (-2)\n\t\t\tend\n\t\tend"
                    }
                ], 
                "title": "Coding your player"
            }, 
            {
                "description": "Let's allow the player to walk through doors into other rooms!", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Add 2 more backdrops to your stage ('room2.png' and 'room3.png'), so that you have 3 backdrops in total. Make sure that they are in the right order - this will help you later.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-backdrops.png"
                    }, 
                    {
                        "text": "You'll need a new variable called `room` {.blockdata}, to keep track of what room the player is in.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-room.png"
                    }, 
                    {
                        "text": "When the player touches the orange door in the first room, the next backdrop should be displayed, and the player should move back to the left side of the stage. Here's the code you'll need - it should go inside the player's `forever` {.blockcontrol} loop:", 
                        "blocks": "if < touching color [#F2A24A] > then\n\t\t\tswitch backdrop to [next backdrop v]\n\t\t\tgo to x: (-200) y: (0)\n\t\t\tchange [room v] by (1)\n\t\tend"
                    }, 
                    {
                        "text": "Add this code to the _start_ of your player code (before the `forever` {.blockcontrol} loop) to make sure that everything is reset when the flag is clicked:", 
                        "blocks": "set [room v] to (1)\n\t\tgo to x: (-200) y: (0)\n\t\tswitch backdrop to [room1 v]"
                    }, 
                    {
                        "text": "Click the flag and move your player over the orange door. Does your player move to the next screen? Does the `room` {.blockdata} variable change to 2?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-room-test.png"
                    }
                ], 
                "title": "Coding your world"
            }, 
            {
                "description": "Let's add signs to your world, to guide your player on their journey.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Upload the image 'sign.svg' as a new sprite, and rename the sprite 'welcome sign'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-sign.png"
                    }, 
                    {
                        "text": "This sign will only be visible in room 1, so let's add some code to the sign to make sure that this happens:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif < (room) = [1] > then\n\t\t\t\tshow\n\t\t\telse\n\t\t\t\thide\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Test your sign by moving between rooms. Your sign should only be visible in room 1.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-sign-test.png"
                    }, 
                    {
                        "text": "A sign isn't much good if it doesn't say anything! Let's add some more code (in another separate block) to display a message if the sign is touching the player:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif < touching [player v]? > then\n\t\t\t\tsay [Welcome! Can you get to the treasure?]\n\t\t\telse\n\t\t\t\tsay []\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Test out your sign, and you should see a message when the player touches it.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-sign-test2.png"
                    }
                ], 
                "title": "Signs"
            }, 
            {
                "description": "Let's add other people to your world that your player can interact with.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add in a new person sprite, using the image 'person.png'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-person.png"
                    }, 
                    {
                        "text": "Add in this code, so that the person talks to your player. This code is very similar to the code you added to your sign:", 
                        "blocks": "when flag clicked\n\t\tgo to x: (-200) y: (0)\n\t\tforever\n\t\t\tif < touching [player v]? > then\n\t\t\t\tsay [Did you know that you can go through orange and yellow doors?]\n\t\t\telse\n\t\t\t\tsay []\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "You could also allow your person to move, by using these two blocks:\n\n\t\n\n\tYour person will act differently, depending on whether you place this code inside the `forever` {.blockcontrol} loop or the `if` {.blockcontrol} block. Try both and see which you prefer.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-person-test.png", 
                        "blocks": "move (1) steps\n\t\tif on edge, bounce"
                    }, 
                    {
                        "text": "Have you noticed that your person flips upside-down. To stop this, click the sprite's information icon (`i`{.blockmotion}), and click the dot to fix to rotation style.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-person-rotate.png"
                    }
                ], 
                "title": "People"
            }, 
            {
                "description": "", 
                "number": "5", 
                "components": [
                    {
                        "text": "+ Add a new variable valled `coins` {.blockdata} to your project."
                    }, 
                    {
                        "text": "Add a new 'coin' sprite to your project.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-coins.png"
                    }, 
                    {
                        "text": "Add code to your coin, so that it only appears in room 1."
                    }, 
                    {
                        "text": "Add code to your coin sprite, to add 1 to your `coins` {.blockdata} once they've been picked up:\n\n\t\n\n\tThe code `stop other scripts in sprite` {.blockcontrol} is needed so that the coin stops being displayed in room 1 once it's been collected.", 
                        "blocks": "when flag clicked\n\t\twait until <touching [player v]?>\n\t\tchange [coins v] by (1)\n\t\tstop [other scripts in sprite v]\n\t\thide"
                    }, 
                    {
                        "text": "You'll also need to add code to set your `coins` {.blockdata} variable to 0 at the start of your game."
                    }, 
                    {
                        "text": "Test your project - collecting your coins should change your score to 1."
                    }
                ], 
                "title": "Collecting coins"
            }, 
            {
                "description": "", 
                "number": "6", 
                "components": [
                    {
                        "text": "+ Create a new sprite from your 'key-blue.svg' image. Switch your stage to backdrop 3, and place the key somewhere difficult to reach!", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-key.png"
                    }, 
                    {
                        "text": "Make sure that your key is only visible in room 3."
                    }, 
                    {
                        "text": "Create a new list variable called `inventory` {.blockdata}. This will be where you store all of the items your player collects."
                    }, 
                    {
                        "text": "The code for collecting the key is very similar to the code for collecting coins. The difference is that you add the key to your inventory.", 
                        "blocks": "when flag clicked\n\t\twait until <touching [player v]?>\n\t\tadd [blue key] to [inventory v]\n\t\tstop [other scripts in sprite v]\n\t\thide"
                    }, 
                    {
                        "text": "Test out your key, to see if you can collect it, and add it to your inventory. Remember to add code to your stage to empty your inventory at the start.", 
                        "blocks": "delete (all v) of [inventory v]"
                    }, 
                    {
                        "text": "Create a new sprite from your 'door-blue.png' image, and place your blue door across the gap in the two walls.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/create_your_own_worldworld-door.png"
                    }, 
                    {
                        "text": "Add code to your door, so that it is only visible in room 3."
                    }, 
                    {
                        "text": "You'll need to hide your blue door to allow your player to pass once you have the blue key in your inventory.", 
                        "blocks": "when flag clicked\n\t\twait until <[inventory v] contains [blue key]>\n\t\tstop [other scripts in sprite v]\n\t\thide"
                    }, 
                    {
                        "text": "Test out your project, and see if you can collect the blue key to open the door!"
                    }
                ], 
                "title": "Doors and keys"
            }
        ], 
        "description": "In this project you'll learn how to create your own open world adventure game.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/34248822/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Create Your Own World"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-final.png", 
        "steps": [
            {
                "description": "Let's start by creating a character that can move left and right, as well as climb up poles.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "For this project, you should have a 'Project Resources' folder, containing the background image you'll need. Make sure that you can find this folder, and ask your club leader if you can't find it.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-resources.png"
                    }, 
                    {
                        "text": "Add the image 'background.png' as a new stage backdrop, or draw your own! If you're drawing your own level, just make sure that the poles and the floors are different colours, and that there's a door (or something similar) that your player has to reach. Here's how your project should look:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-background.png"
                    }, 
                    {
                        "text": "Add a new sprite, which will be your character. It's better if you choose a sprite with multiple costumes, so that you can make it look as though it's walking.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-characters.png"
                    }, 
                    {
                        "text": "Let's use the arrow keys to move your character around. When the player presses the right arrow, you want your character to point right, move a few steps and change to the next costume:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tif <key [right arrow v] pressed? > then\n\t\t\t\tpoint in direction (90 v)\n\t\t\t\tmove (3) steps\n\t\t\t\tnext costume\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Test out your character by clicking the flag and then holding down the right arrow key. Does your player move to the right? Does your character look like they are walking?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-walking.png"
                    }, 
                    {
                        "text": "To move your character to the left, you'll need to add another `if` {.blockcontrol} block inside your `forever` {.blockcontrol} loop, which moves your character to the left. Remember to test your new code, to make sure that it works!"
                    }, 
                    {
                        "text": "To climb a pole, your character should move up slightly whenever the up arrow is pressed and they're touching the correct colour. Add this code inside your character's `forever` {.blockcontrol} loop:", 
                        "blocks": "if < <key [up arrow v] pressed?> and <touching color [#FFFF00]?> > then\n\t\t\tchange y by (4)\n\t\tend"
                    }, 
                    {
                        "text": "Test your character - can you climb the yellow poles and get to the end of your level?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-test-character.png"
                    }
                ], 
                "title": "Character movement"
            }, 
            {
                "description": "Let's make your character move more realistically, by adding gravity and allowing them to jump.", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ You may have noticed that your character can walk off a platform into mid-air. Try to walk off of a platform and see what happens.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-no-gravity.png"
                    }, 
                    {
                        "text": "To fix this, let's add gravity to your game. Create a new variable called `gravity` {.blockdata}. You can hide this variable from your stage if you want to.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-gravity.png"
                    }, 
                    {
                        "text": "Add this new code block, which sets the gravity to a negative number, and then uses this to repeatedly change your character's y-coordinate.", 
                        "blocks": "when flag clicked\n\t\tset [gravity v] to [-4]\n\t\tforever\n\t\t\tchange y by (gravity)\n\t\tend"
                    }, 
                    {
                        "text": "Click the flag, and then drag your character to the top of the stage. What happens? Does the gravity work as you expected?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-gravity-drag.png"
                    }, 
                    {
                        "text": "Gravity shouldn't move your character through a platform or a pole! Add an `if` {.blockcontrol} block to your code, so that the gravity only works when your character is in mid-air. The gravity code should now look like this:", 
                        "blocks": "when flag clicked\n\t\tset [gravity v] to [-4]\n\t\tforever\n\t\t\tif < not < <touching color [#0000FF]?> or <touching color [#FFFF00]?> > > then\n\t\t\t\tchange y by (gravity)\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "Test the gravity again. Does your character stop when they are on a platform or a pole? Can you walk off the edge of platforms to the level below?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-gravity-test.png"
                    }, 
                    {
                        "text": "Let's also make your character jump when the player presses the space bar. One very easy way to do this is to move your character up a few times, using this code:\n\n\t\n\n\tAs gravity is constantly pushing your character down by 4 pixels, you need to choose a number greated than 4 in your `change y by (4)` {.blockmotion} block. Change this number until you're happy with the height your character jumps.", 
                        "blocks": "when [space v] key pressed\n\t\trepeat (10)\n\t\t\tchange y by (4)\n\t\tend"
                    }, 
                    {
                        "text": "If you test out this code, you'll notice that it works, but the movement isn't very smooth. To make jumping look smoother, you'll need to move your character by smaller and smaller amounts, until they're not jumping anymore."
                    }, 
                    {
                        "text": "To do this, create another variable called `jump height` {.blockdata}. Again, you can hide this variable if you prefer."
                    }, 
                    {
                        "text": "Delete the jumping code you added to your character, and replace it with this code:\n\n\t\n\n\tThis code moves your character up by 8 pixels, then 7.5 pixels, then 7 pixels, and so on, until your character has finished jumping. This makes jumping look much smoother.", 
                        "blocks": "when [space v] key pressed\n\t\tset [jump height v] to [8]\n\t\trepeat until < (jump height) = [0] >\n\t\t\tchange y by (jump height)\n\t\t\tchange [jump height v] by (-0.5)\n\t\tend"
                    }, 
                    {
                        "text": "Change the starting value of your `jump height` {.blockdata} variable and test it until you're happy with the height your character jumps."
                    }
                ], 
                "title": "Gravity and jumping"
            }, 
            {
                "description": "Now that you've got your character moving around, let's add some balls for your character to avoid.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Create a new ball sprite. You can choose any type of ball you like.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-balls.png"
                    }, 
                    {
                        "text": "Resize your ball, so that your character can jump over it. Try jumping over the ball to test it.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-ball-resize.png"
                    }, 
                    {
                        "text": "Add this code to your ball:\n\n\t\n\n\tThis code creates a new ball clone every 3 seconds. Each new clone moves along the top platform.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-ball-motion.png"
                    }, 
                    {
                        "text": "Click the flag to test this out.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-ball-test.png"
                    }, 
                    {
                        "text": "Add more code to your ball sprite, so that they move across all 3 platforms.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-ball-more-motion.png"
                    }, 
                    {
                        "text": "Finally, you'll need code for when your character gets hit by a ball! Add this code to your ball sprite:", 
                        "blocks": "when I start as a clone\n\t\tforever\n\t\t\tif < touching [Pico walking v]? > then\n\t\t\t\tbroadcast [hit v]\n\t\t\tend\n\t\tend"
                    }, 
                    {
                        "text": "You'll also need to add code to your character, to move back to the start when they're hit:", 
                        "blocks": "when I receive [hit v]\n\t\tpoint in direction (90 v)\n\t\tgo to x: (-210) y: (-120)"
                    }, 
                    {
                        "text": "Test out your character and see if they go back to the start when they've been hit by a ball."
                    }
                ], 
                "title": "Dodging balls"
            }, 
            {
                "description": "Let's make your game a little harder to complete, by adding lasers!", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add a new sprite to your game, called 'Laser'. It should have 2 costumes, called 'on' and 'off'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-lasers-costume.png"
                    }, 
                    {
                        "text": "Place your new laser anywhere you like, between 2 platforms.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/dodgeballdodge-lasers-position.png"
                    }, 
                    {
                        "text": "Add code to your laser, to make it switch between the 2 costumes.\n\n\t\n\n\tIf you prefer, you can `wait` {.blockcontrol} a `random` {.blockoperators} amount of time between costume changes.", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\tswitch costume to [on v]\n\t\t\twait (2) secs\n\t\t\tswitch costume to [off v]\n\t\t\twait (2) secs\n\t\tend"
                    }, 
                    {
                        "text": "Finally, add code to your laser, so that the 'hit' message is broadcast when the laser touches your character. This code will be the same as the code you added to your ball sprite.\n\n\tYou don't need to add any more code to your character - they already know what to do when they get hit!"
                    }, 
                    {
                        "text": "Test out your game to see if you can get past the laser. Change the `wait` {.blockcontrol} times in your code if the lasers are too easy or too hard."
                    }
                ], 
                "title": "Lasers!"
            }
        ], 
        "description": "In this project you'll learn how to create a platform game, in which you have to dodge the moving balls and reach the end of the level.\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/39740618/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Dodgeball"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-final.png", 
        "steps": [
            {
                "description": "", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Add in a new ghost sprite, and a suitable stage backdrop.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-ghost.png"
                    }, 
                    {
                        "text": "Add this code to your ghost, so that it repeatedly appears and disappears:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\thide\n\t\t\twait (1) secs\n\t\t\tshow\n\t\t\twait (1) secs\n\t\tend"
                    }, 
                    {
                        "text": "Test out your ghost's code, by clicking the green flag."
                    }
                ], 
                "title": "Animating a ghost"
            }, 
            {
                "description": "Your ghost is really easy to catch, because it doesn't move!", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Instead of staying in the same position, you can let Scratch choose random x and y coordinates instead. Add a `go to` {.blockmotion} block to your ghost's code, so that it looks like this:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t\thide\n\t\t\twait (1) secs\n\t\t\tgo to x:(pick random (-150) to (150)) y:(pick random (-150) to (150))\n\t\t\tshow\n\t\t\twait (1) secs\n\t\tend"
                    }, 
                    {
                        "text": "Test our your ghost again, and you should notice that it appears in a different place each time."
                    }
                ], 
                "title": "Random ghosts"
            }, 
            {
                "description": "Lets allow the player to catch ghosts!", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ To allow the player to catch a ghost, add this code:", 
                        "blocks": "when this sprite clicked\n\t\thide"
                    }, 
                    {
                        "text": "Test out your project. Can you catch ghosts as they appear? If you find it difficult to catch the ghosts, you can play the game in fullscreen mode by clicking this button:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-fullscreen.png"
                    }
                ], 
                "title": "Catching ghosts"
            }, 
            {
                "description": "Let's make things more interesting by keeping score.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ To keep the player's score, you need a place to put it. A __variable__ is a place to store data that can change, like a score.\n\n\tTo create a new variable, click on the 'Scripts' tab, select `Data` {.blockdata} and then click 'Make a Variable'.\n\n\t\n\n\tType 'score' as the name of the variable, make sure that it is available for all sprites, and click 'OK' to create it. You'll then see lots of code blocks that can be used with your `score` {.blockdata} variable.\n\n\t\n\n\tYou'll also see the score in the top-left of the stage.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-score.png"
                    }, 
                    {
                        "text": "When a new game is started (by clicking the flag), you should set the player's score to 0:", 
                        "blocks": "when flag clicked\n\tset [score v] to [0]"
                    }, 
                    {
                        "text": "Whenever a ghost is caught, you need to add 1 to the player's score:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-change-score.png"
                    }, 
                    {
                        "text": "Run your program again and catch some ghosts. Does your score change?"
                    }
                ], 
                "title": "Adding a score"
            }, 
            {
                "description": "You can make your game more interesting, by only giving your player 10 seconds to catch as many ghosts as possible.", 
                "number": "5", 
                "components": [
                    {
                        "text": "+ You can use another variable to store the remaining time left. Click on the stage, and create a new variable called 'time':", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-time.png"
                    }, 
                    {
                        "text": "This is how the timer should work:\n\n\t+ The timer should start at 10 seconds;\n\t+ The timer should count down every second;\n\t+ The game should stop when the timer gets to 0.\n\n\tHere's the code to do this, which you can add to your __stage__:\n\n\t\n\n\tThis is how you add the `repeat until`{.blockcontrol}`time`{.blockdata}`= 0`{.blockoperators} code:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-timer-help.png", 
                        "blocks": "when flag clicked\n\t\tset [time v] to [10]\n\t\trepeat until <(time) = [0]>\n\t\t\twait (1) secs\n\t\t\tchange [time v] by (-1)\n\t\tend\n\t\tstop [all v]"
                    }, 
                    {
                        "text": "Drag your 'time' variable display to the right side of the stage. You can also right-click on the variable display and choose 'large readout' to change how the time is displayed.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/ghostbustersghost-readout.png"
                    }, 
                    {
                        "text": "Ask a friend to test your game. How many points can they score? If your game is too easy, you can:\n\n\t+ Give the player less time;\n\t+ Make the ghosts appear less often;\n\t+ Make the ghosts smaller.\n\n\tTest your game a few times until you're happy that it's the right level of difficulty."
                    }
                ], 
                "title": "Adding a timer"
            }
        ], 
        "description": "You are going to make a ghost-catching game!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/60787262/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Ghostbusters"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-final.png", 
        "steps": [
            {
                "description": "Let's make a spaceship that flies towards the Earth!", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Add 'Spaceship' and 'Earth' sprites to your stage. You should also add the 'Stars' backdrop to your stage. This is how your stage should look:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-sprites.png"
                    }, 
                    {
                        "text": "Click on your new spaceship sprite, and click the 'Costumes' tab.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-costume.png"
                    }, 
                    {
                        "text": "Use the arrow tool to select the image. Then click on the circular rotate handle, and rotate the image until it is on its side.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-rotate.png"
                    }, 
                    {
                        "text": "Add this code to your spaceship sprite:\n\n\t\n\n\tChange the numbers in the code blocks, so that the code is exactly the same as in the image above.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-animate.png"
                    }, 
                    {
                        "text": "If you click on the code blocks to run the code, you should see the spaceship speak, turn and move towards the centre of the stage.\n\n\t\n\n\tThe screen position `x:(0) y:(0)` {.blockmotion} is the center of the stage. A position like `x:(-150) y:(-150)` {.blockmotion} is towards the bottom-left of the stage, and a position like `x:(150) y:(150)` {.blockmotion} is near the top-right.\n\n\t\n\n\tIf you need to know the coordinates of a position on the stage, move the mouse to the position you want and make a note of the coordinates, which are displayed below the stage.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-animate-stage.png"
                    }, 
                    {
                        "text": "Try out your animation, by clicking on the green flag just above the stage.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-flag.png"
                    }
                ], 
                "title": "Animating a spaceship"
            }, 
            {
                "description": "Another way of animating the spaceship is to tell it to move a small amount, lots of times.", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Delete the `glide` {.blockmotion} block from your code, by right-clicking on the block and clicking 'delete'. You can also delete code by dragging it off the script area, back into the code blocks area.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-delete-glide.png"
                    }, 
                    {
                        "text": "Once you've removed your code, add this code instead:\n\n\t\n\n\tThe `repeat` {.blockcontrol} block is used to repeat something lots of times, and is also known as a __loop__.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-loop.png"
                    }, 
                    {
                        "text": "If you click the flag to try out this new code, you'll see that it does pretty much the same thing as before."
                    }, 
                    {
                        "text": "You can add more code to your loop, to do interesting things. Add the `change color effect by 25` {.blocklooks} block into the loop (from the 'Looks' section), to repeatedly change the colour of the spaceship as it moves:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-colour.png"
                    }, 
                    {
                        "text": "Click the flag to see your new animation.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-colour-test.png"
                    }, 
                    {
                        "text": "You can also make your spaceship get smaller as it moves towards the Earth.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-size.png"
                    }, 
                    {
                        "text": "Test out your animation. What happens if you click the flag a second time? Does your spaceship start off the right size? Can you use this block to fix your animation:\n\n\t```scratch\n\tset size to (100) %\n\t```"
                    }
                ], 
                "title": "Animating using loops"
            }, 
            {
                "description": "Let's add monkey to your animation, who's lost in space!", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Start by adding in the monkey sprite from the library.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-monkey.png"
                    }, 
                    {
                        "text": "If you click on your new monkey sprite and then click 'Costumes', you can edit how the monkey looks. Click the 'Ellipse' tool, and draw a white space helmet around the monkey's head.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-monkey-edit.png"
                    }, 
                    {
                        "text": "Now click 'Scripts', and add this code to the monkey, so that it spins slowly in a circle forever:\n\n\t\n\n\tThe `forever` {.blockcontrol} block is another loop, but this time one that never ends.", 
                        "blocks": "when FLAG clicked\n\t\tforever\n\t\t    turn right (1) degrees\n\t\tend"
                    }, 
                    {
                        "text": "Click the flag to test your monkey. You'll have to click the stop button (next to the flag) to end this animation.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-monkey-loop.png"
                    }
                ], 
                "title": "Floating Monkey"
            }, 
            {
                "description": "Let's add some floating space-rock to your animation.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add a 'rock' sprite to your animation.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-rock-sprite.png"
                    }, 
                    {
                        "text": "Add this code to your rock, to make it bounce around the stage:\n\n\t```scratch\n\twhen flag clicked\n\tpoint towards [Earth v]\n\tforever\n\t\tmove (2) steps\n\t\tif on edge, bounce\n\t```"
                    }, 
                    {
                        "text": "Click the flag to test your rock. Does it bounce around the stage?"
                    }
                ], 
                "title": "Bouncing Asteroids"
            }, 
            {
                "description": "Let's combine loops to make a shining star.", 
                "number": "5", 
                "components": [
                    {
                        "text": "+ Add a 'star' sprite to your animation", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-star-sprite.png"
                    }, 
                    {
                        "text": "Add this code to your star:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/lost_in_spacespace-star.png"
                    }, 
                    {
                        "text": "Click the flag to test out this star animation. What does this code do? Well, the star is made slightly bigger 20 times, and then made slightly smaller 20 times, back to it's original size. These 2 loops are inside a `forever` {.blockcontrol} loop, so the animation keeps repeating."
                    }
                ], 
                "title": "Shining Stars"
            }
        ], 
        "description": "You are going to learn how to program your own animation!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26818098/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Lost in Space"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-final.png", 
        "steps": [
            {
                "description": "First, let's create a character that can change to a random sequence of colours for the player to memorise.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Choose a character and a backdrop. Your character doesn't have to be a person, but it needs to be able to show different colours.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-sprite.png"
                    }, 
                    {
                        "text": "In your game, you'll use a different number to represent each colour:\n\n\t+ 1 = red;\n\t+ 2 = blue;\n\t+ 3 = green;\n\t+ 4 = yellow.\n\n\tGive your character 4 different colour costumes, one for each of the 4 colours above. Make sure that your coloured costumes are in the right order.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-costume.png"
                    }, 
                    {
                        "text": "To create a random sequence, you need to create a __list__. A list is just a variable that stores lots of data __in order__. Create a new list called `sequence` {.blockdata}. As only your character needs to see the list, we can also click 'For this sprite only'.\n\n\t\n\n\tYou should now see your empty list in the top-left of your stage, as well as lots of new blocks for using lists.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-list.png"
                    }, 
                    {
                        "text": "Add this code to your character, to add a random number to your list (and show the correct costume) 5 times:\n\n\t\n\n\tNotice that you have also emptied the list to begin with.", 
                        "blocks": "when flag clicked\n\t\tdelete (all v) of [sequence v]\n\t\trepeat (5)\n\t\t\tadd (pick random (1) to (4)) to [sequence v]\n\t\t\tswitch costume to (item (last v) of [sequence v]\n\t\t\twait (1) secs\n\t\tend"
                    }
                ], 
                "title": "Random colours"
            }, 
            {
                "description": "Let's add 4 buttons, for the player to repeat the sequence they've remembered.", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Add 4 sprites to your project, that will become buttons. Edit your 4 sprites, so that there's 1 for each of the 4 colours.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-drums.png"
                    }, 
                    {
                        "text": "When the red drum is clicked, you'll need to broadcast a message to your character, letting them know that the red button has been clicked. Add this code to your red drum:", 
                        "blocks": "when this sprite clicked\n\t\tbroadcast [red v]"
                    }, 
                    {
                        "text": "When your character receives this message, they should check whether the number 1 is at the start of the list (which means that red is the next colour in the sequence). If it is, you can remove the number from the list, as it's been guessed correctly. Otherwise it's game over!", 
                        "blocks": "when I receive [red v]\n\t\tif <(item (1 v) of [sequence v])=[1]> then\n\t\t\tdelete (1 v) of [sequence v]\n\t\telse\n\t\t\tsay [Game over!] for (1) secs\n\t\t\tstop [all v]\n\t\tend"
                    }, 
                    {
                        "text": "You could also display some flashing lights once the list is empty, as it means the entire sequence has been guessed correctly. Add this code to the end of your character's `when flag clicked` {.blockevents} script:", 
                        "blocks": "wait until < (length of [sequence v]) = [0]>\n\t\tbroadcast [won v] and wait"
                    }, 
                    {
                        "text": "Click on your stage, and add this code to make the backdrop change colour once the player has won.", 
                        "blocks": "when I receive [won v]\n\t\tplay sound [drum machine v]\n\t\trepeat (50)\n\t\t\tchange [color v] effect by (25)\n\t\t\twait (0.1) secs\n\t\tend\n\t\tclear graphic effects"
                    }
                ], 
                "title": "Repeating the sequence"
            }, 
            {
                "description": "So far, the player only has to remember 5 colours. Let's improve your game, so that the length of the sequence increases.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Create a new variable called `score` {.blockdata}.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-score.png"
                    }, 
                    {
                        "text": "This `score` {.blockdata} will be used to decide on the length of the sequence the player has to memorise. So, to begin with the score (and the sequence length) is 3. Add this code block to the start of your character's `when flag clicked` {.blockevents} code:", 
                        "blocks": "set [score v] to [3]"
                    }, 
                    {
                        "text": "Instead of always creating a sequence of 5 colours, you now want the `score` {.blockdata} to determine the sequence length. Change your character's `repeat` {.blockcontrol} loop (for creating the sequence) to:", 
                        "blocks": "repeat (score)\n\t\tend"
                    }, 
                    {
                        "text": "If the sequence is guessed correctly, you should add 1 to the score, to increase the length of the sequence.", 
                        "blocks": "change [score v] by (1)"
                    }, 
                    {
                        "text": "Finally, you need to add a `forever` {.blockcontrol} loop around the code to generate the sequence, so that a new sequence is created for each level. This is how your character's code should look:", 
                        "blocks": "when flag clicked\n\t\tset [score v] to [3]\n\t\tforever\n\t\t\tdelete (all v) of [sequence v]\n\t\t\trepeat (score)\n\t\t\t\tadd (pick random (1) to (4)) to [sequence v]\n\t\t\t\tswitch costume to (item (last v) of [sequence v]\n\t\t\t\twait (1) secs\n\t\t\tend\n\t\t\twait until < (length of [sequence v]) = [0]>\n\t\t\tbroadcast [won v] and wait\n\t\t\tchange [score v] by (1)\n\t\tend"
                    }, 
                    {
                        "text": "Get your friends to test out your game. Remember to hide the `sequence` {.blockdata} list before they play it!"
                    }
                ], 
                "title": "Multiple levels"
            }, 
            {
                "description": "Let's save the high score, so that you can play against your friends.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add 2 new variables to your project, called `high score` {.blockdata} and `name` {.blockdata}."
                    }, 
                    {
                        "text": "If ever the game ends (by pressing the wrong button), you need to check whether the player's score is higher than the current high score. If it is, you need to save the score as the high score, and store the name of the player. Here's how your red button should look:", 
                        "blocks": "when I receive [red v]\n\t\tif <(item (1 v) of [sequence v])=[1]> then\n\t\t\tdelete (1 v) of [sequence v]\n\t\telse\n\t\t\tsay [Game over!] for (1) secs\n\t\t\tif < (score) > (high score) > then\n\t\t\t\tset [high score v] to (score)\n\t\t\t\task [High score! What is your name?] and wait\n\t\t\t\tset [name v] to (answer)\n\t\t\tend\n\t\t\tstop [all v]\n\t\tend"
                    }, 
                    {
                        "text": "You'll need to add this new code to the other 3 buttons too! Have you noticed that the 'Game over' code in each of the 4 buttons is exactly the same?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-same.png"
                    }, 
                    {
                        "text": "If ever you need to change any of this code, such as adding a sound or changing the 'Game over!' message, you'd have to change it 4 times! That could get annoying, and waste a lot of time.\n\n\tInstead, you can define your own blocks, and reuse them in your project! To do this, click `more blocks` {.blockmoreblocks}, and then 'Make a block'. Call this new block 'Game over'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-more.png"
                    }, 
                    {
                        "text": "Add the code from the `else` {.blockcontrol} block from the red button to the new block that appears:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-make-block.png"
                    }, 
                    {
                        "text": "You've now made a new _function_ called `Game over` {.blockmoreblocks}, which you can use anywhere you like. Drag your new `Game over` {.blockmoreblocks} block onto the 4 scripts for the buttons.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-use-block.png"
                    }, 
                    {
                        "text": "Now add a sound for when the wrong button is pressed. You only need to add this code _once_ in the `Game over` {.blockmoreblocks} block that you made, and not 4 separate times!", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/memorycolour-cough.png"
                    }
                ], 
                "title": "High score"
            }
        ], 
        "description": "In this project, you will create a memory game where you have to memorise and repeat a sequence of random colours!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/34874510/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Memory"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-final.png", 
        "steps": [
            {
                "description": "Let's start by making a pencil, that can be used to draw on the stage.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ Start a new Scratch project, and delete the cat sprite so that your project is empty. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>."
                    }, 
                    {
                        "text": "Add the pencil sprite to your project.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pencil.png"
                    }, 
                    {
                        "text": "Click 'Costumes', and delete the 'pencil-b' costume.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pencil-delete.png"
                    }, 
                    {
                        "text": "Rename your costume 'pencil-blue', and use the 'Color a shape' tool to make the pencil blue.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pencil-blue.png"
                    }, 
                    {
                        "text": "As you'll be using the mouse to draw, you'll want the pencil to follow the mouse `forever` {.blockcontrol}. Add this code to your pencil sprite:", 
                        "blocks": "when flag clicked\n\t\tforever\n\t\t  go to [mouse pointer v]\n\t\tend"
                    }, 
                    {
                        "text": "Test out this code by clicking the flag and then moving the mouse around the stage. Does this work as you expected?"
                    }, 
                    {
                        "text": "Have you noticed that it's the centre of the pencil, and not the tip, that follows the mouse pointer?\n\n\t\n\n\tTo fix this, click on the 'pencil-blue' costume of your pencil sprite, and click 'Set costume center'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-center.png"
                    }, 
                    {
                        "text": "You should notice that a crosshair appears on the costume. You can now click just below the tip of the pencil, to set this point as the costume centre.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pencil-center.png"
                    }, 
                    {
                        "text": "Click the 'Scripts' tab, and then test out your pencil again - does it work better than it did before?"
                    }, 
                    {
                        "text": "Next, let's make your pencil draw `if` {.blockcontrol} the mouse has been clicked. Add this code to your pencil sprite:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pencil-draw-code.png"
                    }, 
                    {
                        "text": "Test your code again. This time, move the pencil around the stage and hold down the mouse button. Can you draw with your pencil?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-draw.png"
                    }
                ], 
                "title": "Making a pencil"
            }, 
            {
                "description": "Let's add different colour pens to your project, and allow the user to choose between them!", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ Click on your pencil sprite, click 'Costumes' and duplicate your 'pencil-blue' costume.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-blue-duplicate.png"
                    }, 
                    {
                        "text": "Rename your new costume 'pencil-green', and colour the pencil green.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pencil-green.png"
                    }, 
                    {
                        "text": "Create two new sprites, which you will use to select the blue or green pencil.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-selectors.png"
                    }, 
                    {
                        "text": "When the green selector icon is clicked, you need to `broadcast` {.blockevents} a message to the pencil sprite, telling it to change its costume and pencil colour.\n\n\tTo do this, first add this code to the green selector icon:\n\n\t\n\n\tTo create the `broadcast` {.blockevents} block, click the down arrow and select 'new message...'.\n\n\t\n\n\tYou can then type 'green' to create your new message.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-broadcast.png", 
                        "blocks": "when this sprite clicked\n\t\tbroadcast [green v]"
                    }, 
                    {
                        "text": "You now need to tell your pencil sprite what to do when it receives the message. Add this code to your pencil sprite:\n\n\t\n\n\tTo set the pencil to colour to green, click the coloured box in the `set color` {.blockpen} block, and click on the green selector icon to choose green as your pencil colour.", 
                        "blocks": "when I receive [green v]\n\t\tswitch costume to [pencil-green v]\n\t\tset pen color to [#00ff00]"
                    }, 
                    {
                        "text": "You can now do the same for the blue pencil icon, adding this code to the blue selector sprite:\n\n\t\n\n\t...and adding this code to the pencil sprite:", 
                        "blocks": "when this sprite clicked\n\t\tbroadcast [blue v]"
                    }, 
                    {
                        "text": "Finally, you need to tell your pencil sprite what costume and pencil colour to choose, as well as clearing the screen, when your project is started. Add this code to the beginning of the pencil's `when flag clicked` {.blockevents} code (before the `forever` {.blockcontrol} loop):\n\n\t\n\n\tIf you prefer, you can start with a different colour pencil!", 
                        "blocks": "clear\n\t\tswitch costume to [blue-pencil v]\n\t\tset pen color to [#0000ff]"
                    }, 
                    {
                        "text": "Test out your project. Can you switch between blue and green pens?", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-pens-test.png"
                    }
                ], 
                "title": "Coloured pens"
            }, 
            {
                "description": "Sometimes mistakes happen, so let's add a 'clear' button and an eraser to our project!", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ Let's add a button to clear the stage. To do this, add the 'X-block' letter sprite to the stage, and colour it in red.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-x.png"
                    }, 
                    {
                        "text": "Add code to your new cancel button to clear the stage when it's clicked.\n\n\t\n\n\tNotice that you don't need to send a message to clear the stage, as any sprite can do it!", 
                        "blocks": "when this sprite clicked\n\t\tclear"
                    }, 
                    {
                        "text": "You can also create an eraser. If your club leader has given you a 'Resources' folder, click 'Upload costume from file' and add the 'eraser.svg' image.\n\n\t\n\t\n\tIf you don't have the eraser.svg image, just create a new white pen instead!", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-eraser-costume.png"
                    }, 
                    {
                        "text": "You should also add the eraser image as a new selector sprite. This is how your stage shoud look:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-eraser-stage.png"
                    }, 
                    {
                        "text": "You can then add code to the eraser selector sprite, to tell the pencil to switch to an eraser.", 
                        "blocks": "when this sprite clicked\n\t\tbroadcast [eraser v]"
                    }, 
                    {
                        "text": "When the pencil receives this message, you can create an eraser by switching the pencil costume to the eraser, and switching the pencil colour to the same colour as the stage!", 
                        "blocks": "when I receive [eraser v]\n\t\tswitch costume to [eraser v]\n\t\tset pen color to [#FFFFFF]"
                    }, 
                    {
                        "text": "Test your project, to see if you can clear and erase on the stage.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-erase-test.png"
                    }, 
                    {
                        "text": "There's one more problem with the pencil - you can draw anywhere on the stage, including near the selector icons!\n\n\t\n\n\tTo fix this, you have to tell the pencil only to draw if the mouse is clicked _and_ if the y-position of the mouse is greater than -110 (`mouse y`{.blocksensing}`> -120` {.blockoperators}). Change your pencil's `if` {.blockcontrol} statement to look like this:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-draw-problem.png"
                    }, 
                    {
                        "text": "Test your project; you now shouldn't be able to draw near the selector blocks.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-fixed.png"
                    }
                ], 
                "title": "Making mistakes"
            }, 
            {
                "description": "Let's allow the user to draw using a range of different pencil sizes.", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ First, add a new variable called 'width'. If you're not sure how to do this, the 'Balloons' project will help you."
                    }, 
                    {
                        "text": "Add this line _inside_ the `forever` {.blockcontrol} loop of your pencil's code:\n\n\t\n\n\tYour pencil width will now repeatedly be set to the value of your 'width' variable.", 
                        "blocks": "set pen size to (width)"
                    }, 
                    {
                        "text": "You can change the number stored in this variable by right-clicking on your variable (on the stage) and clicking 'slider'.\n\n\t\n\n\tYou can now drag the slider below the variable to change its value.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-slider.png"
                    }, 
                    {
                        "text": "Test your project, and see if you can modify the pencil width.\n\n\t\n\n\tIf you prefer, you can set the minimum and maximum value of 'width' that's allowed. To do this, right-click on your variable again and click 'set slider min and max'. Set the minimum and maximum values of your variable to something more sensible, like 1 and 20.\n\n\t\n\n\tKeep testing your 'width' variable until you're happy.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/paint_boxpaint-width-test.png"
                    }
                ], 
                "title": "Changing the pencil width"
            }
        ], 
        "description": "In this project, you will be making your own paint program!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/63473366/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Paint Box"
    }, 
    {
        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-final.png", 
        "steps": [
            {
                "description": "Before you can start animating, you'll need to add in a 'thing' to animate. In Scratch, these 'things' are called __sprites__.", 
                "number": "1", 
                "components": [
                    {
                        "text": "+ First, open up the Scratch editor. You can find the online Scratch editor at <a href=\"http://jumpto.cc/scratch-new\">jumpto.cc/scratch-new</a>. It looks like this:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-scratch.png"
                    }, 
                    {
                        "text": "The cat sprite that you can see is the Scratch mascot. Let's get rid of it, by right-clicking and then clicking 'delete'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-delete.png"
                    }, 
                    {
                        "text": "Next, click 'Choose sprite from library' to open up a list of all the Scratch sprites.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-sprite-library.png"
                    }, 
                    {
                        "text": "Scroll down until you see a drum sprite. Click on a drum, and click 'OK' to add it to your project.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-sprite-drum.png"
                    }, 
                    {
                        "text": "Click the 'shrink' icon, and then click on the drum a few times to make it smaller.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-shrink.png"
                    }
                ], 
                "title": "Sprites"
            }, 
            {
                "description": "The __stage__ is the area on the left, and is where your project comes to life. Think of it as a performance area, just like a real stage!", 
                "number": "2", 
                "components": [
                    {
                        "text": "+ At the moment, the stage is white, and looks pretty boring! Let's add a backdrop to the stage, by clicking 'Choose backdrop from library'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-stage-choose.png"
                    }, 
                    {
                        "text": "Click 'Indoors' on the left, and then click on a stage backdrop and click 'OK'.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-backdrop.png"
                    }, 
                    {
                        "text": "Your stage should now look like this:", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-stage.png"
                    }
                ], 
                "title": "The Stage"
            }, 
            {
                "description": "Let's code your drum to make a sound when it's hit.", 
                "number": "3", 
                "components": [
                    {
                        "text": "+ You can find the code blocks in the 'Scripts' tab, and they are all colour-coded! \n\n\tClick on the drum sprite, and then drag these 2 blocks into the code area to the right, making sure that they are connected together (like Lego blocks):", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-code.png"
                    }, 
                    {
                        "text": "Click the drum to try out your new instrument!"
                    }, 
                    {
                        "text": "You can also change how the drum looks when it's clicked, by creating a new costume. Click the 'Costumes' tab, and you'll see the drum image.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-drum-costume.png"
                    }, 
                    {
                        "text": "Right-click on the costume and click 'duplicate' to create a copy of the costume.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-drum-duplicate.png"
                    }, 
                    {
                        "text": "Click on the new costume (called 'drum2') and then select the line tool and draw lines to make it look like the drum is making a sound.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-drum-hit.png"
                    }, 
                    {
                        "text": "The names of the costumes aren't very helpful at the moment. Rename the 2 costumes to 'not hit' and 'hit' by typing the new name of each costume into the text box.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-drum-name.png"
                    }, 
                    {
                        "text": "Now that you have 2 different costumes for your drum, you can choose which costume is displayed! Add these 2 blocks to your drum:\n\n\t\n\n\tThe code block for changing the costume is in the `Looks` {.blocklooks} section.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-looks.png"
                    }, 
                    {
                        "text": "Test your drum. When clicked, your drum should now look like it's been hit!"
                    }
                ], 
                "title": "Making a Drum"
            }, 
            {
                "description": "Let's add a singer to your band!", 
                "number": "4", 
                "components": [
                    {
                        "text": "+ Add another 2 sprites to your stage; a singer and a microphone.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-singer-mic.png"
                    }, 
                    {
                        "text": "Before you can make your singer sing, you need to add a sound to your sprite. Make sure that you have selected your singer, then click the 'Sounds' tab, and click 'Choose sound from library':", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-import-sound.png"
                    }, 
                    {
                        "text": "If you click 'Vocals' on the left hand side, you will then be able to choose a suitable sound to add to your sprite.", 
                        "image": "https://s3-eu-west-1.amazonaws.com/turing-resources/rock_bandband-choose-sound.png"
                    }, 
                    {
                        "text": "Now that the sound has been added, you can add this code to your singer:", 
                        "blocks": "when this sprite clicked\n\t\tplay sound [singer1 v] until done"
                    }, 
                    {
                        "text": "Click on your singer, to make sure that she sings when clicked."
                    }
                ], 
                "title": "Making a Singer"
            }
        ], 
        "description": "In this project you'll learn how to code your own musical instruments!\n\n<div class=\"scratch-preview\">\n  <iframe allowtransparency=\"true\" width=\"485\" height=\"402\" src=\"http://scratch.mit.edu/projects/embed/26741186/?autostart=false\" frameborder=\"0\"></iframe>\n  \n</div>", 
        "title": "Rock Band"
    }
]